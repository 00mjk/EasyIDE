(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     63655,       1494]
NotebookOptionsPosition[     56199,       1370]
NotebookOutlinePosition[     56659,       1388]
CellTagsIndexPosition[     56616,       1385]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[StyleData[StyleDefinitions -> FrontEnd`FileName[{"EasyIDE"}, 
  "DarkMode.nb"]],ExpressionUUID->"56c3b829-3e87-4fca-b174-674893c27589"],

Cell[BoxData[
 RowBox[{"<<", "BTools`FrontEnd`"}]], "Input",
 CellChangeTimes->{{3.727652528507365*^9, 3.727652535127715*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"07809128-ebcb-4b55-b4b4-3da5baa01559"],

Cell[CellGroupData[{

Cell["CodePackage Styles (to be copied)", "Title",
 CellChangeTimes->{{3.7646444030557013`*^9, 3.764644415655684*^9}, {
  3.764644481672279*^9, 
  3.764644481894074*^9}},ExpressionUUID->"8cd2feba-913a-488a-b253-\
6eb8fc691dfa"],

Cell[CellGroupData[{

Cell["Notebook", "Section",
 CellChangeTimes->{{3.7019919195251827`*^9, 
  3.7019919206287117`*^9}},ExpressionUUID->"9e170b00-ccda-44f8-81ed-\
dc4db8f2568b"],

Cell[CellGroupData[{

Cell["Notebook", "Subsection",
 CellChangeTimes->{{3.701991926180812*^9, 
  3.7019919272283773`*^9}},ExpressionUUID->"c2da89e0-7470-45a4-a03c-\
fb141c0b6da7"],

Cell[CellGroupData[{

Cell[StyleData["Notebook"],
 ExportAutoReplacements->{"\t" -> "  ", ParentList},
 AutoGeneratedPackage->Automatic,
 InitializationCellEvaluation->False,
 NotebookDynamicExpression:>None,
 WindowStatusArea->Dynamic[
   If[
    CurrentValue["NotebookSelected"], 
    With[{StatusAreaTracking`mp = Replace[
        MousePosition["DocumentAbsolute"], {None -> {1., 1.}, {
           Pattern[StatusAreaTracking`w, 
            Blank[]], 
           Pattern[StatusAreaTracking`h, 
            Blank[]]} :> {
           Max[{StatusAreaTracking`h, 1.}], 
           Max[{StatusAreaTracking`w, 1.}]}}], 
      StatusAreaTracking`wh = {20, 8}}, 
     StringJoin[{"R: ", 
       Insert[
        Map[ToString, 
         MapThread[
         1 + Floor[#/#2]& , {StatusAreaTracking`mp, StatusAreaTracking`wh}]], 
        " C: ", 2]}]], ""]],
 PrivateNotebookOptions->{"FileContents"->{"NotebookData"},
 "FileOutlineCache"->False},
 TrackCellChangeTimes->False,
 ShowPredictiveInterface->
  False,ExpressionUUID->"b33d0961-f041-4b4d-bae4-b1b4ce765f3b"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<Notebook\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ExportAutoReplacements", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<\\t\>\"", "\[Rule]", "\"\<  \>\""}], ",", " ", 
        "ParentList"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"NotebookEventActions", "\[Rule]", "Inherited"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"CellEventActions", "\[Rule]", "Inherited"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"NotebookDynamicExpression", "\[Rule]", "None"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"AutoGeneratedPackage", "\[Rule]", "Automatic"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"PrivateNotebookOptions", "\[Rule]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\"\<FileOutlineCache\>\"", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<FileContents\>\"", "\[Rule]", 
         RowBox[{
         "{", "\[IndentingNewLine]", "\"\<NotebookData\>\"", 
          "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ShowPredictiveInterface", "\[Rule]", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"System`TrackCellChangeTimes", "\[Rule]", "False"}]}], 
    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7401126736985826`*^9, 3.740112690838971*^9}, {
  3.762978224921673*^9, 3.762978290753031*^9}, {3.762978334489834*^9, 
  3.7629783386903257`*^9}, {3.762978716229682*^9, 3.7629787168831587`*^9}, {
  3.7629787543722763`*^9, 3.762978754688901*^9}, {3.762980209986689*^9, 
  3.762980216472999*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"b14f8f7f-0714-418b-ab8d-6b1a1403775c"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Highlighting", "Section",
 CellChangeTimes->{{3.7634924300920353`*^9, 
  3.76349243497195*^9}},ExpressionUUID->"83e2f557-a2c0-4ba6-ae62-\
4b96ff5af008"],

Cell[StyleData["CommentStyle", StyleDefinitions -> StyleData["StringStyle"]],
 FontFamily->"Arial",
 FontColor->Hue[
  0, 0.8, 0.8],ExpressionUUID->"5f6b2d3b-d54f-44be-bd6b-37768ae42c18"],

Cell[StyleData["UndefinedSymbolStyle", StyleDefinitions -> StyleData[
 "CodeStyle"]],
 FontColor->Hue[
  0.666, 0.6, 0.8],ExpressionUUID->"2047f379-de11-47e5-847e-b27185bb74e8"],

Cell[StyleData["StringStyle", StyleDefinitions -> StyleData["CodeStyle"]],
 ShowAutoStyles->False,
 ShowSyntaxStyles->False,
 TranslationOptions->{"Enabled"->False},
 AutoNumberFormatting->False,
 FontColor->GrayLevel[0.4],
 FontColr -> 
 RGBColor[0.2, 0.6, 
   0.3],ExpressionUUID->"46f11983-e6ff-4811-a42e-b87699f6daa5"],

Cell[StyleData["GlobalStyle", StyleDefinitions -> StyleData["CodeStyle"]],
 FontFamily->
  "Mathematica",ExpressionUUID->"04b82573-230a-4ed8-9a78-26233142e453"]
}, Closed]],

Cell[CellGroupData[{

Cell["Primary", "Section",
 CellChangeTimes->{{3.701991936299202*^9, 
  3.7019919405160007`*^9}},ExpressionUUID->"45d8f51a-1005-45fc-836f-\
e301276119bc"],

Cell[CellGroupData[{

Cell["Classic Styles", "Subsection",
 CellChangeTimes->{{3.7314300271389227`*^9, 
  3.731430031217709*^9}},ExpressionUUID->"7080830d-fdf3-473e-9f57-\
61d9b5332c45"],

Cell[StyleData["Title"],
 MenuCommandKey->None,ExpressionUUID->"e6ea10fb-65ae-43fe-818f-d11a14e443bf"],

Cell[StyleData["Chapter"],
 MenuCommandKey->None,ExpressionUUID->"82d697f6-c1f1-47e0-8084-a0e2ab762951"],

Cell[StyleData["Subchapter"],
 MenuCommandKey->None,ExpressionUUID->"b8007005-60a0-425d-9065-49e41b5b6edf"]
}, Closed]],

Cell[CellGroupData[{

Cell["Code", "Subsection",
 CellChangeTimes->{{3.701991954530994*^9, 
  3.701991954955996*^9}},ExpressionUUID->"4426b8d2-5131-44ef-9a69-\
3a03c62d311f"],

Cell[StyleData["CodeChapter", StyleDefinitions -> StyleData["Chapter"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Chapter:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellBracketOptions->{"Color"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 InitializationGroup->True,
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Chapter:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1175,
 MenuCommandKey->None,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"4a45b09f-d296-4ff9-a472-dc35cebb781a"],

Cell[StyleData["CodeSection", StyleDefinitions -> StyleData["Section"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Section:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, {{0, 0}, {0, 
   1}}],
 ShowGroupOpener->False,
 WholeCellGroupOpener->False,
 CellBracketOptions->{"Color"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSubsection", "Backspace" -> "CodeChapter"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 InitializationGroup->True,
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Section:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, {{0, 0}, {0, 
     1}}], CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], 
     GrayLevel[0.8]], "ReturnKeyDown" :> If[
     Not[
      MatchQ[
       NotebookRead[
        NextCell[]], 
       Cell[
        Blank[], "InputSection", 
        BlankNullSequence[]]]], SelectionMove[
       EvaluationCell[], After, Cell]; NotebookWrite[
       EvaluationNotebook[], 
       Cell[
        BoxData["Begin[\"`Private`\"];"], "InputSection"]]; NotebookWrite[
       EvaluationNotebook[], 
       Cell[
        BoxData["End[];"], "InputSection"]]]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], 
   GrayLevel[0.8]],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1255,
 MenuCommandKey->"4",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"db6c0815-b70c-4ad4-af3b-182cc8919ba5"],

Cell[StyleData["CodeSubsection", StyleDefinitions -> StyleData["Subsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsection:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{55, Inherited}, {Inherited, Inherited}},
 CellBracketOptions->{"HoverColor"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSubsubsection", "Backspace" -> "CodeSection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsection:: *)\n(*", "\[RightFloor]" -> 
     "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1305,
 MenuCommandKey->"5",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"db29f9a2-09b5-4997-bbbd-bfb205067b71"],

Cell[StyleData["CodeSubsubsection", StyleDefinitions -> StyleData[
 "Subsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsection::Closed:: *)\n(*", "\[RightFloor]" -> 
   "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{59, Inherited}, {Inherited, Inherited}},
 CellBracketOptions->{"HoverColor"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{
  "Tab" -> "CodeSubsubsubsection", "Backspace" -> "CodeSubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1105,
 MenuCommandKey->"6",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"23de901f-d959-4d5c-bba9-b2e6bb6c97bb"],

Cell[StyleData["CodeSubsubsubsection", StyleDefinitions -> StyleData[
 "Subsubsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsubsection::Closed:: *)\n(*", 
   "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{63, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->{
  "Tab" -> "CodeSubsubsubsubsection", "Backspace" -> "CodeSubsubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1355,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"26a1244f-5416-44a8-abce-f19c80804fef"],

Cell[StyleData["CodeSubsubsubsubsection", StyleDefinitions -> StyleData[
 "Subsubsubsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsubsubsection::Closed:: *)\n(*", 
   "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{67, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->{"Backspace" -> "CodeSubsubsubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsubsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1355,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"83a1226e-2970-4254-88e8-6eb7f98cd24a"],

Cell[StyleData["CodeInput", StyleDefinitions -> StyleData["Input"]],
 PageWidth->Infinity,
 ShowGroupOpener->False,
 CellMargins->{{67, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->None,
 CellEvaluationFunction->(Null& ),
 CellEventActions->{{"MenuCommand", "SelectionCloseAllGroups"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Indent"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], {
    "MenuCommand", "SelectionOpenAllGroups"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Dedent"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], {
    "MenuCommand", "InsertMatchingBrackets"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Toggle"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], PassEventsDown -> False},
 ShowCellLabel->False,
 AutoIndent->True,
 TabFilling->"_",
 LineSpacing->{0, 14},
 TabSpacings->1.5,
 AutoSpacing->False,
 LineIndent->1,
 MenuSortingValue->1505,
 MenuCommandKey->"`",
 FontSize->13,
 FontWeight->"Plain",ExpressionUUID->"78b44a19-3fff-48e3-8180-5ee17951518e"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"MakeIndentable", "@", 
   RowBox[{"PreviousCell", "[", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.71725342657089*^9, 
  3.717253429713491*^9}},ExpressionUUID->"55f843a3-e3a1-4965-8aeb-\
6d3cb5da24c5"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{
   RowBox[{"\"\<Code\>\"", "~~", "___"}], ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ShowGroupOpener", "\[Rule]", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontWeight", "\[Rule]", "\"\<Plain\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.738094621090701*^9, 3.7380946297527113`*^9}, {
   3.75000526679217*^9, 3.7500052854930153`*^9}, {3.750005845090378*^9, 
   3.750005857688715*^9}, 3.750005888166115*^9},
 CellLabel->"In[96]:=",ExpressionUUID->"028b4489-4a01-4d2e-9141-dd6179c0f2f6"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<CodeInput\>\"", ",", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StyleKeyMapping", "\[Rule]", "None"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MenuSortingValue", "\[Rule]", "1505"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MenuCommandKey", "\[Rule]", "\"\<`\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.709296415477832*^9, 3.709296427883548*^9}, 
   3.726971966431284*^9, {3.734638100173815*^9, 3.7346381136987963`*^9}, {
   3.734638191820404*^9, 3.7346382003223953`*^9}, 3.738094614531478*^9, {
   3.751830355052676*^9, 3.7518303596838408`*^9}, 3.751830392989221*^9, {
   3.7518304466278763`*^9, 3.751830484792054*^9}, {3.751831321709577*^9, 
   3.751831358769465*^9}, {3.751831446354993*^9, 
   3.751831453283099*^9}},ExpressionUUID->"7b79f7cc-2a36-435c-8bec-\
129d45f874a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StyleSheetEdit", "[", 
      RowBox[{
       RowBox[{"\"\<Code\>\"", "<>", "#"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"CellMargins", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"55", "+", 
             RowBox[{"4", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "-", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"#", "===", "\"\<Input\>\""}], ",", " ", "2", ",", 
                  " ", "1"}], "]"}]}], ")"}]}]}], ",", " ", "Inherited"}], 
           "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"Inherited", ",", " ", "Inherited"}], "}"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Append", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{"\"\<S\>\"", "\[Rule]", "\"\<Subs\>\""}], "]"}], ",", 
        "\"\<Subsection\>\"", ",", " ", "3"}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Input\>\""}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.738094621090701*^9, 3.7380946297527113`*^9}, {
  3.75000526679217*^9, 3.750005308389511*^9}, {3.7500054357644787`*^9, 
  3.7500054879111347`*^9}, {3.750005602326676*^9, 3.7500056429563007`*^9}, {
  3.750005683373413*^9, 3.750005744082568*^9}, {3.750005789157963*^9, 
  3.750005826338373*^9}, {3.75000591069986*^9, 3.7500059238877077`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"730aeeff-6a64-4207-b44f-52813aae4e4f"],

Cell[CellGroupData[{

Cell["Eval Tracking", "Subsubsection",
 CellChangeTimes->{{3.731430054194949*^9, 
  3.731430056817024*^9}},ExpressionUUID->"c592d1bd-202a-40fa-a6cf-\
79133c6b5a8f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Begin", "[", "\"\<FrontEnd`Private`EventTracking`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$escapeChars", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<\[LeftCeiling]\>\"", ",", "\"\<\[RightFloor]\>\""}], "}"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"leftEscape", "=", 
       RowBox[{"First", "@", "$escapeChars"}]}], ",", 
      RowBox[{"rightEscape", "=", 
       RowBox[{"Last", "@", "$escapeChars"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"StyleSheetEdit", "[", 
       RowBox[{"#", ",", "\[IndentingNewLine]", 
        RowBox[{"ShowCellLabel", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellEvaluationFunction", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"Function", "[", "\[IndentingNewLine]", 
          RowBox[{"Function", "@", "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"ev", "=", 
                RowBox[{"CurrentValue", "[", 
                 RowBox[{
                  RowBox[{"EvaluationCell", "[", "]"}], ",", "Evaluatable"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"text", "=", 
                RowBox[{"First", "@", 
                 RowBox[{"NotebookRead", "[", 
                  RowBox[{"EvaluationCell", "[", "]"}], "]"}]}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SelectionMove", "[", 
               RowBox[{
                RowBox[{"EvaluationCell", "[", "]"}], ",", 
                "\[IndentingNewLine]", "All", ",", "\[IndentingNewLine]", 
                "CellContents"}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"NotebookWrite", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"ev", "//", "TrueQ"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"StringTrim", "[", 
                   RowBox[{"text", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartOfString", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "leftEscape"}], ")"}], "|", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"rightEscape", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "EndOfString"}], ")"}]}]}], "\[IndentingNewLine]", "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"leftEscape", "<>", "text", "<>", "rightEscape"}]}],
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"SetOptions", "[", 
               RowBox[{
                RowBox[{"EvaluationCell", "[", "]"}], ",", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Evaluatable", "\[Rule]", 
                  RowBox[{"Not", "@", "ev"}]}], "\[IndentingNewLine]", 
                 "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"CellEventActions", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"DeleteDuplicatesBy", "[", "First", "]"}], "@", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"_Rule", "|", "_RuleDelayed"}], "]"}], "@", 
           "\[IndentingNewLine]", 
           RowBox[{"Flatten", "@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<MenuCommand\>\"", ",", "\"\<HandleShiftReturn\>\""}], 
                  "}"}], ":>", "\[IndentingNewLine]", 
                 RowBox[{"With", "[", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ev", "=", 
                    RowBox[{"CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"text", "=", 
                    RowBox[{"First", "@", 
                    RowBox[{"NotebookRead", "[", 
                    RowBox[{"EvaluationCell", "[", "]"}], "]"}]}]}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                   
                   RowBox[{
                    RowBox[{"SelectionMove", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    "\[IndentingNewLine]", "All", ",", "\[IndentingNewLine]", 
                    "CellContents"}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"NotebookWrite", "[", 
                    RowBox[{
                    RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ev", "//", "TrueQ"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"text", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartOfString", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "leftEscape"}], ")"}], "|", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"rightEscape", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "EndOfString"}], ")"}]}]}], "\[IndentingNewLine]", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    "leftEscape", "<>", "text", "<>", "rightEscape"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Evaluatable", "\[Rule]", 
                    RowBox[{"Not", "@", "ev"}]}], "\[IndentingNewLine]", 
                    "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"ExportAutoReplacements", "->", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"leftEscape", "\[Rule]", "\[IndentingNewLine]", 
                    RowBox[{"\"\<(* ::\>\"", "<>", 
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"#", ",", "\"\<Code\>\""}], "]"}], "<>", 
                    "\"\<::\>\"", "<>", "\[IndentingNewLine]", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"#", ",", "\"\<Code\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "\"\<Subsubsection\>\"", "|", 
                    "\"\<Subsubsubsection\>\""}], ",", "\[IndentingNewLine]", 
                    "\"\<Closed::\>\"", ",", "\[IndentingNewLine]", "_", ",", 
                    "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}], "<>", 
                    "\[IndentingNewLine]", "\"\< *)\\n(*\>\""}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"rightEscape", "\[Rule]", "\"\<*)\\n\>\""}]}], 
                  "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
                
                RowBox[{"CellFrame", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"FEPrivate`If", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"FEPrivate`SameQ", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FrontEnd`CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"FEPrivate`Self", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}], ",", "\[IndentingNewLine]", 
                    "True"}], "\[IndentingNewLine]", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "\[Equal]", "\"\<CodeSection\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", "Inherited"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"CellFrameColor", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"FEPrivate`If", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"FEPrivate`SameQ", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FrontEnd`CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"FEPrivate`Self", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}], ",", "\[IndentingNewLine]", 
                    "True"}], "\[IndentingNewLine]", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"GrayLevel", "[", ".95", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "\[Equal]", "\"\<CodeSection\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GrayLevel", "[", ".8", "]"}], ",", 
                    "\[IndentingNewLine]", "Inherited"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"StyleSheetValue", "[", 
               RowBox[{"#", ",", "CellEventActions"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}]}]}]}]}], "\[IndentingNewLine]", 
       "]"}], "&"}], "/@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<CodeChapter\>\"", ",", "\"\<CodeSection\>\"", ",", 
       "\[IndentingNewLine]", "\"\<CodeSection\>\"", ",", 
       "\"\<CodeSubsection\>\"", ",", "\[IndentingNewLine]", 
       "\"\<CodeSubsubsection\>\"", ",", "\"\<CodeSubsubsubsection\>\"", ",", 
       "\[IndentingNewLine]", "\"\<Text\>\""}], "\[IndentingNewLine]", 
      "}"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.703736917276146*^9, 3.703737089238969*^9}, {
   3.7037419912383213`*^9, 3.703742020423052*^9}, {3.703742411392068*^9, 
   3.703742413120737*^9}, {3.703742917078529*^9, 3.7037429182128353`*^9}, {
   3.703743929808996*^9, 3.703743937726211*^9}, {3.703743972708601*^9, 
   3.703744004349695*^9}, {3.703744059697982*^9, 3.703744060010633*^9}, {
   3.7037441097902393`*^9, 3.7037441342774363`*^9}, {3.7037441731879177`*^9, 
   3.703744196224221*^9}, {3.703746513052899*^9, 3.7037465143382053`*^9}, {
   3.703746940539653*^9, 3.703746940754431*^9}, {3.703747197961206*^9, 
   3.703747199216054*^9}, {3.703747361538211*^9, 3.703747576098709*^9}, {
   3.703748032101754*^9, 3.7037480436323833`*^9}, {3.7037481974504223`*^9, 
   3.7037482182083063`*^9}, {3.703748464561307*^9, 3.703748525532406*^9}, {
   3.7037485653473597`*^9, 3.703748574839395*^9}, {3.703748607285345*^9, 
   3.703748611084371*^9}, {3.703749067817411*^9, 3.703749152449209*^9}, {
   3.7037492271444607`*^9, 3.7037492892059517`*^9}, {3.703749328581574*^9, 
   3.7037493846971416`*^9}, {3.703751972180211*^9, 3.703751972874411*^9}, {
   3.703760911770759*^9, 3.703760935814859*^9}, {3.70376108422173*^9, 
   3.703761201989459*^9}, 3.72697196645347*^9, {3.731430065231534*^9, 
   3.731430078716885*^9}},ExpressionUUID->"17e2966e-9e91-4232-a784-\
54fa3ea2772c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Style Key Mapping", "Subsubsection",
 CellChangeTimes->{{3.731430110617981*^9, 
  3.7314301133685093`*^9}},ExpressionUUID->"de302954-fee2-44bd-b3d2-\
90e58d9ba03e"],

Cell[BoxData[
 RowBox[{"<<", "BTools`All`"}]], "Input",
 CellChangeTimes->{{3.731430164077712*^9, 3.731430166152071*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"749c0e84-4582-4662-a072-4ebdd8ed1371"],

Cell[BoxData[
 RowBox[{
  RowBox[{"codeSections", "=", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<CodeChapter\>\"", ",", "\"\<CodeSection\>\"", ",", 
     "\"\<CodeSubsection\>\"", ",", "\[IndentingNewLine]", 
     "\"\<CodeSubsubsection\>\"", ",", "\"\<CodeSubsubsubsection\>\"", ",", 
     "\[IndentingNewLine]", "\"\<CodeSubsubsubsubsection\>\""}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73143021000318*^9, 3.731430213768955*^9}, {
   3.731430812735969*^9, 3.731430818797453*^9}, 3.731431009599165*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"e87c348d-99e2-4cea-a71f-6febe075c4be"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StyleSheetEdit", "[", 
      RowBox[{"#", ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"StyleKeyMapping", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", "=!=", "None"}], ",", " ", 
             RowBox[{"\"\<Tab\>\"", "\[Rule]", "#2"}], ",", " ", "Nothing"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#3", "=!=", "None"}], ",", " ", 
             RowBox[{"\"\<Backspace\>\"", "\[Rule]", "#3"}], ",", " ", 
             "Nothing"}], "]"}]}], "\[IndentingNewLine]", " ", "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"codeSections", ",", "\[IndentingNewLine]", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Rest", "@", "codeSections"}], ",", " ", "None"}], "]"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"Most", "@", "codeSections"}], ",", " ", "None"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.731430124296628*^9, 3.73143025251306*^9}, {
  3.731430824591393*^9, 3.731430828719112*^9}, {3.731430949625338*^9, 
  3.731430951068665*^9}, {3.7314309835737257`*^9, 3.7314310150270443`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"daad434e-451a-4355-9032-f9229c79b623"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Standard", "Subsection",
 CellChangeTimes->{{3.701991960018416*^9, 
  3.701991961355*^9}},ExpressionUUID->"d505382e-35a8-42d2-99c5-124cd03410d5"],

Cell[StyleData["Section"],
 WholeCellGroupOpener->True,
 MenuCommandKey->"1",ExpressionUUID->"bc7157be-3a96-4351-ad46-c33554eb7242"],

Cell[StyleData["Subsection"],
 ShowGroupOpener->True,
 MenuCommandKey->"2",ExpressionUUID->"7eef1397-7474-4892-98af-7759bf0ecddc"],

Cell[StyleData["Subsubsection"],
 ShowGroupOpener->True,
 MenuCommandKey->"3",
 FontWeight->Plain,ExpressionUUID->"536df33b-2707-4050-992a-b7780954cc97"],

Cell[StyleData["Code"],
 ShowGroupOpener->False,
 MenuCommandKey->None,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"33dc79f8-cc4b-4524-adf5-4b8dcf3441b3"],

Cell[StyleData["CodeSeparator", StyleDefinitions -> StyleData["Input"]],
 Editable->False,
 CellFrame->{{0, 0}, {0, 1}},
 ShowCellBracket->Automatic,
 ShowGroupOpener->False,
 CellBracketOptions->{"OverlapContent"->True},
 Deployed->True,
 Evaluatable->False,
 CellGroupingRules->"InputGrouping",
 CellFrameMargins->{{0, 0}, {-6, -5}},
 CellFrameColor->GrayLevel[0.8],
 CellSize->{1, 1},
 DefaultFormatType->DefaultTextFormatType,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",
 Background->GrayLevel[
  0.95],ExpressionUUID->"4b7d48b9-2540-4790-890c-5bc4581d5508"],

Cell[StyleData["Text"],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Text:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], 
   ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Text:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], 
   Inherited],ExpressionUUID->"96db608b-d593-4b92-874c-05a1dd305fee"],

Cell[StyleData["Input"],
 StyleKeyMapping->{
  "*" -> "Item", "]" -> 
   "CodeInput"},ExpressionUUID->"a1e4fa6f-0a78-4de0-8504-3983a56de9c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Custom", "Subsection",
 CellChangeTimes->{{3.701991978530724*^9, 
  3.701991979410685*^9}},ExpressionUUID->"9e8f827d-b9bd-4650-b7b0-\
17b6a5b1a0cc"],

Cell[StyleData["SectionSeparator", Style -> "Section"],
 CellFrame->{{0, 0}, {2, 2}},
 CellMargins->{{0, 0}, {Inherited, Inherited}},
 CellBracketOptions->{"Color"->None,
 "OverlapContent"->True},
 Deployed->True,
 CellGroupingRules->{"GroupTogetherGrouping", 0},
 CellFrameColor->RGBColor[0, 0, 0.4],
 MenuCommandKey->"8",
 FontOpacity->0,
 Background->GrayLevel[
  0.9],ExpressionUUID->"9ea116d7-ccd6-4853-a04b-d61617b4ba45"],

Cell[CellGroupData[{

Cell[StyleData["InputChapter", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{27, Inherited}, {10, 15}},
 StyleKeyMapping->{"Tab" -> "InputSection"},
 CellGroupingRules->{"SectionGrouping", 30},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1575,ExpressionUUID->"5c5a47c9-4f33-4a6f-a4f8-781517609681"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputChapter\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", " ", 
     RowBox[{"\"\<Tab\>\"", "\[Rule]", "\"\<InputSection\>\""}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
  3.7338049886958847`*^9, 3.7338050806028833`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"955a0c0a-f748-49b4-9cce-f8c7023a726e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[StyleData["InputSection", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{50.3477, 3.}, {8., 12.}},
 StyleKeyMapping->{"Backspace" -> "InputChapter", "Tab" -> "InputSubsection"},
 
 CellGroupingRules->{"SectionGrouping", 40},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1590,ExpressionUUID->"63327d4a-d11f-467f-b2fc-a0f11ec32eb8"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputSection\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Backspace\>\"", "\[Rule]", "\"\<InputChapter\>\""}], ",", 
      " ", 
      RowBox[{"\"\<Tab\>\"", "\[Rule]", "\"\<InputSubsection\>\""}]}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
  3.7338049886958847`*^9, 3.733805068619689*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"b8671d11-a493-4a19-86e6-fa184e11846d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[StyleData["InputSubsection", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{66, Inherited}, {8, 12}},
 StyleKeyMapping->{"Backspace" -> "InputSection"},
 CellGroupingRules->{"SectionGrouping", 50},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1590,ExpressionUUID->"2d65cb77-f4bb-49c4-b9c0-add4d5ce957f"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputSubsection\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", " ", 
     RowBox[{"\"\<Backspace\>\"", "\[Rule]", "\"\<InputSection\>\""}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
   3.7338049886958847`*^9, 3.733805085873375*^9}, 3.733805123928615*^9},
 CellLabel->"In[93]:=",ExpressionUUID->"e9b97f23-bd47-498e-8d7d-8c0d924c4557"],

Cell["<<BTools`All`", "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"afc663d4-024f-47c9-b9cb-fe017d624369"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StyleSheetValue", "[", 
  RowBox[{"\"\<Subsubsection\>\"", ",", " ", "CellMargins"}], "]"}]], "Input",\

 CellChangeTimes->{{3.7338049241295357`*^9, 3.733804956389875*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"6c973d8f-998b-46cb-9ffe-5cc3d679cd31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"66", ",", "Inherited"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "12"}], "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.7338049534240017`*^9, 3.733804957057424*^9}},
 CellLabel->"Out[86]=",ExpressionUUID->"ce5f2315-cd92-4c19-9880-bc9011a0ef21"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
},
Saveable->True,
WindowSize->{798, 781},
WindowMargins->{{251, Automatic}, {16, Automatic}},
TaggingRules->{"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"PrivateStylesheetFormatting.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 140, 1, 36, 85, 1, "StyleData", "StyleDefinitions", "",ExpressionUUID->"56c3b829-3e87-4fca-b174-674893c27589"],
Cell[701, 23, 205, 3, 30, "Input",ExpressionUUID->"07809128-ebcb-4b55-b4b4-3da5baa01559"],
Cell[CellGroupData[{
Cell[931, 30, 227, 4, 67, "Title",ExpressionUUID->"8cd2feba-913a-488a-b253-6eb8fc691dfa"],
Cell[CellGroupData[{
Cell[1183, 38, 157, 3, 49, "Section",ExpressionUUID->"9e170b00-ccda-44f8-81ed-dc4db8f2568b"],
Cell[CellGroupData[{
Cell[1365, 45, 158, 3, 45, "Subsection",ExpressionUUID->"c2da89e0-7470-45a4-a03c-fb141c0b6da7"],
Cell[CellGroupData[{
Cell[1548, 52, 1036, 27, 36, 27, 0, "StyleData", "Notebook", "All",ExpressionUUID->"b33d0961-f041-4b4d-bae4-b1b4ce765f3b"],
Cell[2587, 81, 1857, 37, 367, "Input",ExpressionUUID->"b14f8f7f-0714-418b-ab8d-6b1a1403775c"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[4505, 125, 158, 3, 33, "Section",ExpressionUUID->"83e2f557-a2c0-4ba6-ae62-4b96ff5af008"],
Cell[4666, 130, 187, 3, 38, 77, 0, "StyleData", "CommentStyle", "All",ExpressionUUID->"5f6b2d3b-d54f-44be-bd6b-37768ae42c18"],
Cell[4856, 135, 177, 3, 36, 85, 1, "StyleData", "UndefinedSymbolStyle", "All",ExpressionUUID->"2047f379-de11-47e5-847e-b27185bb74e8"],
Cell[5036, 140, 322, 8, 36, 74, 0, "StyleData", "StringStyle", "All",ExpressionUUID->"46f11983-e6ff-4811-a42e-b87699f6daa5"],
Cell[5361, 150, 160, 2, 35, 74, 0, "StyleData", "GlobalStyle", "All",ExpressionUUID->"04b82573-230a-4ed8-9a78-26233142e453"]
}, Closed]],
Cell[CellGroupData[{
Cell[5558, 157, 154, 3, 33, "Section",ExpressionUUID->"45d8f51a-1005-45fc-836f-e301276119bc"],
Cell[CellGroupData[{
Cell[5737, 164, 164, 3, 45, "Subsection",ExpressionUUID->"7080830d-fdf3-473e-9f57-61d9b5332c45"],
Cell[5904, 169, 102, 1, 113, 24, 0, "StyleData", "Title", "All",ExpressionUUID->"e6ea10fb-65ae-43fe-818f-d11a14e443bf",
 MenuCommandKey->None],
Cell[6009, 172, 104, 1, 84, 26, 0, "StyleData", "Chapter", "All",ExpressionUUID->"82d697f6-c1f1-47e0-8084-a0e2ab762951",
 MenuCommandKey->None],
Cell[6116, 175, 107, 1, 63, 29, 0, "StyleData", "Subchapter", "All",ExpressionUUID->"b8007005-60a0-425d-9065-49e41b5b6edf",
 MenuCommandKey->None]
}, Closed]],
Cell[CellGroupData[{
Cell[6260, 181, 152, 3, 29, "Subsection",ExpressionUUID->"4426b8d2-5131-44ef-9a69-3a03c62d311f"],
Cell[6415, 186, 2978, 70, 84, 72, 0, "StyleData", "CodeChapter", "All",ExpressionUUID->"4a45b09f-d296-4ff9-a472-dc35cebb781a",
 MenuSortingValue->1175,
 MenuCommandKey->None],
Cell[9396, 258, 3525, 88, 68, 72, 0, "StyleData", "CodeSection", "All",ExpressionUUID->"db6c0815-b70c-4ad4-af3b-182cc8919ba5",
 MenuSortingValue->1255,
 MenuCommandKey->"4"],
Cell[12924, 348, 3061, 70, 49, 78, 0, "StyleData", "CodeSubsection", "All",ExpressionUUID->"db29f9a2-09b5-4997-bbbd-bfb205067b71",
 MenuSortingValue->1305,
 MenuCommandKey->"5"],
Cell[15988, 420, 3104, 73, 48, 86, 1, "StyleData", "CodeSubsubsection", "All",ExpressionUUID->"23de901f-d959-4d5c-bba9-b2e6bb6c97bb",
 MenuSortingValue->1105,
 MenuCommandKey->"6"],
Cell[19095, 495, 3038, 71, 43, 92, 1, "StyleData", "CodeSubsubsubsection", "All",ExpressionUUID->"26a1244f-5416-44a8-abce-f19c80804fef",
 MenuSortingValue->1355],
Cell[22136, 568, 3014, 70, 42, 98, 1, "StyleData", "CodeSubsubsubsubsection", "All",ExpressionUUID->"83a1226e-2970-4254-88e8-6eb7f98cd24a",
 MenuSortingValue->1355],
Cell[25153, 640, 2321, 61, 37, 68, 0, "StyleData", "CodeInput", "All",ExpressionUUID->"78b44a19-3fff-48e3-8180-5ee17951518e",
 MenuSortingValue->1505,
 MenuCommandKey->"`"],
Cell[27477, 703, 247, 6, 30, "Input",ExpressionUUID->"55f843a3-e3a1-4965-8aeb-6d3cb5da24c5"],
Cell[27727, 711, 658, 13, 115, "Input",ExpressionUUID->"028b4489-4a01-4d2e-9141-dd6179c0f2f6"],
Cell[28388, 726, 923, 18, 115, "Input",ExpressionUUID->"7b79f7cc-2a36-435c-8bec-129d45f874a7"],
Cell[29314, 746, 1841, 41, 220, "Input",ExpressionUUID->"730aeeff-6a64-4207-b44f-52813aae4e4f"],
Cell[CellGroupData[{
Cell[31180, 791, 164, 3, 44, "Subsubsection",ExpressionUUID->"c592d1bd-202a-40fa-a6cf-79133c6b5a8f"],
Cell[31347, 796, 13396, 263, 2194, "Input",ExpressionUUID->"17e2966e-9e91-4232-a784-54fa3ea2772c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44780, 1064, 170, 3, 28, "Subsubsection",ExpressionUUID->"de302954-fee2-44bd-b3d2-90e58d9ba03e"],
Cell[44953, 1069, 199, 3, 30, "Input",ExpressionUUID->"749c0e84-4582-4662-a072-4ebdd8ed1371"],
Cell[45155, 1074, 664, 12, 136, "Input",ExpressionUUID->"e87c348d-99e2-4cea-a71f-6febe075c4be"],
Cell[45822, 1088, 1696, 37, 325, "Input",ExpressionUUID->"daad434e-451a-4355-9032-f9229c79b623"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47567, 1131, 151, 2, 45, "Subsection",ExpressionUUID->"d505382e-35a8-42d2-99c5-124cd03410d5"],
Cell[47721, 1135, 132, 2, 82, 26, 0, "StyleData", "Section", "All",ExpressionUUID->"bc7157be-3a96-4351-ad46-c33554eb7242",
 MenuCommandKey->"1"],
Cell[47856, 1139, 130, 2, 53, 29, 0, "StyleData", "Subsection", "All",ExpressionUUID->"7eef1397-7474-4892-98af-7759bf0ecddc",
 MenuCommandKey->"2"],
Cell[47989, 1143, 153, 3, 52, 32, 0, "StyleData", "Subsubsection", "All",ExpressionUUID->"536df33b-2707-4050-992a-b7780954cc97",
 MenuCommandKey->"3"],
Cell[48145, 1148, 180, 4, 58, 23, 0, "StyleData", "Code", "All",ExpressionUUID->"33dc79f8-cc4b-4524-adf5-4b8dcf3441b3",
 MenuCommandKey->None],
Cell[48328, 1154, 572, 16, 32, 72, 0, "StyleData", "CodeSeparator", "All",ExpressionUUID->"4b7d48b9-2540-4790-890c-5bc4581d5508"],
Cell[48903, 1172, 2640, 63, 50, 23, 0, "StyleData", "Text", "All",ExpressionUUID->"96db608b-d593-4b92-874c-05a1dd305fee"],
Cell[51546, 1237, 141, 3, 42, 24, 0, "StyleData", "Input", "All",ExpressionUUID->"a1e4fa6f-0a78-4de0-8504-3983a56de9c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51724, 1245, 154, 3, 29, "Subsection",ExpressionUUID->"9e8f827d-b9bd-4650-b7b0-17b6a5b1a0cc"],
Cell[51881, 1250, 427, 11, 56, 55, 0, "StyleData", "SectionSeparator", "All",ExpressionUUID->"9ea116d7-ccd6-4853-a04b-d61617b4ba45",
 MenuCommandKey->"8"],
Cell[CellGroupData[{
Cell[52333, 1265, 409, 9, 72, 71, 0, "StyleData", "InputChapter", "All",ExpressionUUID->"5c5a47c9-4f33-4a6f-a4f8-781517609681",
 MenuSortingValue->1575],
Cell[52745, 1276, 491, 9, 73, "Input",ExpressionUUID->"955a0c0a-f748-49b4-9cce-f8c7023a726e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53273, 1290, 444, 10, 67, 71, 0, "StyleData", "InputSection", "All",ExpressionUUID->"63327d4a-d11f-467f-b2fc-a0f11ec32eb8",
 MenuSortingValue->1590],
Cell[53720, 1302, 597, 12, 73, "Input",ExpressionUUID->"b8671d11-a493-4a19-86e6-fa184e11846d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54354, 1319, 417, 9, 67, 74, 0, "StyleData", "InputSubsection", "All",ExpressionUUID->"2d65cb77-f4bb-49c4-b9c0-add4d5ce957f",
 MenuSortingValue->1590],
Cell[54774, 1330, 524, 9, 73, "Input",ExpressionUUID->"e9b97f23-bd47-498e-8d7d-8c0d924c4557"],
Cell[55301, 1341, 175, 2, 30, "Input",ExpressionUUID->"afc663d4-024f-47c9-b9cb-fe017d624369"],
Cell[CellGroupData[{
Cell[55501, 1347, 275, 5, 30, "Input",ExpressionUUID->"6c973d8f-998b-46cb-9ffe-5cc3d679cd31"],
Cell[55779, 1354, 356, 9, 34, "Output",ExpressionUUID->"ce5f2315-cd92-4c19-9880-bc9011a0ef21"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
}
]
*)

