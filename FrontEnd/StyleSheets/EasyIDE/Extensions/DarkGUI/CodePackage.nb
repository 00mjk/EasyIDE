(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     62814,       1440]
NotebookOptionsPosition[     55707,       1337]
NotebookOutlinePosition[     56148,       1354]
CellTagsIndexPosition[     56105,       1351]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[StyleData[StyleDefinitions -> FrontEnd`FileName[{"EasyIDE"}, 
  "DarkGUI.nb"]],ExpressionUUID->"56c3b829-3e87-4fca-b174-674893c27589"],

Cell[BoxData[
 RowBox[{"<<", "BTools`FrontEnd`"}]], "Input",
 CellChangeTimes->{{3.727652528507365*^9, 3.727652535127715*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"07809128-ebcb-4b55-b4b4-3da5baa01559"],

Cell[CellGroupData[{

Cell["CodePackage Styles (to be copied)", "Title",
 CellChangeTimes->{{3.7646444030557013`*^9, 
  3.764644415655684*^9}},ExpressionUUID->"298eaa4b-824a-4ec2-84c8-\
b9e321c6e15d"],

Cell[CellGroupData[{

Cell["Notebook", "Section",
 CellChangeTimes->{{3.7019919195251827`*^9, 
  3.7019919206287117`*^9}},ExpressionUUID->"1fe9ccd2-628c-47eb-9260-\
95ded004007a"],

Cell[CellGroupData[{

Cell["Notebook", "Subsection",
 CellChangeTimes->{{3.701991926180812*^9, 
  3.7019919272283773`*^9}},ExpressionUUID->"088722cc-907e-4407-9acc-\
dc36d07ba5db"],

Cell[CellGroupData[{

Cell[StyleData["Notebook"],
 ExportAutoReplacements->{"\t" -> "  ", ParentList},
 AutoGeneratedPackage->Automatic,
 InitializationCellEvaluation->False,
 WindowStatusArea->Dynamic[
   If[
    CurrentValue["NotebookSelected"], 
    With[{StatusAreaTracking`mp = Replace[
        MousePosition["DocumentAbsolute"], {None -> {1., 1.}, {
           Pattern[StatusAreaTracking`w, 
            Blank[]], 
           Pattern[StatusAreaTracking`h, 
            Blank[]]} :> {
           Max[{StatusAreaTracking`h, 1.}], 
           Max[{StatusAreaTracking`w, 1.}]}}], 
      StatusAreaTracking`wh = {20, 8}}, 
     StringJoin[{"R: ", 
       Insert[
        Map[ToString, 
         MapThread[
         1 + Floor[#/#2]& , {StatusAreaTracking`mp, StatusAreaTracking`wh}]], 
        " C: ", 2]}]], ""]],
 PrivateNotebookOptions->{"FileContents"->{"NotebookData"},
 "FileOutlineCache"->False},
 TrackCellChangeTimes->False,
 ShowPredictiveInterface->
  False,ExpressionUUID->"dae0ac5e-c163-4524-a1f7-575a71d0b872"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<Notebook\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ExportAutoReplacements", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<\\t\>\"", "\[Rule]", "\"\<  \>\""}], ",", " ", 
        "ParentList"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"NotebookEventActions", "\[Rule]", "Inherited"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"CellEventActions", "\[Rule]", "Inherited"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"AutoGeneratedPackage", "\[Rule]", "Automatic"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"PrivateNotebookOptions", "\[Rule]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\"\<FileOutlineCache\>\"", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<FileContents\>\"", "\[Rule]", 
         RowBox[{
         "{", "\[IndentingNewLine]", "\"\<NotebookData\>\"", 
          "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ShowPredictiveInterface", "\[Rule]", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"System`TrackCellChangeTimes", "\[Rule]", "False"}]}], 
    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7401126736985826`*^9, 3.740112690838971*^9}, {
  3.762978224921673*^9, 3.762978290753031*^9}, {3.762978334489834*^9, 
  3.7629783386903257`*^9}, {3.762978716229682*^9, 3.7629787168831587`*^9}, {
  3.7629787543722763`*^9, 3.762978754688901*^9}, {3.762980209986689*^9, 
  3.762980216472999*^9}, {3.7664726365680857`*^9, 
  3.766472641197945*^9}},ExpressionUUID->"3e72e2b8-cdb6-49dc-9bea-\
e1f533785260"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Highlighting", "Section",
 CellChangeTimes->{{3.7634924300920353`*^9, 
  3.76349243497195*^9}},ExpressionUUID->"8414895d-8028-4762-90a4-\
b8d67da0ee47"],

Cell[StyleData["CommentStyle", StyleDefinitions -> StyleData["StringStyle"]],
 FontFamily->"Arial",
 FontColor->Hue[
  0, 0.8, 0.8],ExpressionUUID->"1a850dfc-0af0-458c-8f2c-c2ffd49ec5e4"],

Cell[StyleData["UndefinedSymbolStyle", StyleDefinitions -> StyleData[
 "CodeStyle"]],
 FontColor->Hue[
  0.666, 0.6, 0.8],ExpressionUUID->"43c9240e-ab1f-45fe-9ce6-be76e4b3c247"],

Cell[StyleData["StringStyle", StyleDefinitions -> StyleData["CodeStyle"]],
 ShowAutoStyles->False,
 ShowSyntaxStyles->False,
 TranslationOptions->{"Enabled"->False},
 AutoNumberFormatting->False,
 FontColor->GrayLevel[0.4],
 FontColr -> 
 RGBColor[0.2, 0.6, 
   0.3],ExpressionUUID->"1866a658-30eb-4f54-ace0-046875d191b8"],

Cell[StyleData["GlobalStyle", StyleDefinitions -> StyleData["CodeStyle"]],
 FontFamily->
  "Mathematica",ExpressionUUID->"6e76c86f-cdd0-4124-ae38-b2d69a5f7991"]
}, Closed]],

Cell[CellGroupData[{

Cell["Primary", "Section",
 CellChangeTimes->{{3.701991936299202*^9, 
  3.7019919405160007`*^9}},ExpressionUUID->"ded4c0e9-5971-4f1b-a890-\
3778b5a3c9ec"],

Cell["Classic Styles", "Subsection",
 CellChangeTimes->{{3.7314300271389227`*^9, 
  3.731430031217709*^9}},ExpressionUUID->"d9041244-82eb-474d-9d8f-\
540f9ad18c82"],

Cell[StyleData["Title"],
 MenuCommandKey->None,ExpressionUUID->"1cc20631-994a-4339-b070-e892449ffe7f"],

Cell[StyleData["Chapter"],
 MenuCommandKey->None,ExpressionUUID->"dd184da4-eca6-4475-8a19-31e63dd0cd48"],

Cell[StyleData["Subchapter"],
 MenuCommandKey->None,ExpressionUUID->"ae6b18b2-e466-4039-876b-f17e67b391de"],

Cell["Code", "Subsection",
 CellChangeTimes->{{3.701991954530994*^9, 
  3.701991954955996*^9}},ExpressionUUID->"e8393492-53e6-4dd2-a660-\
c2ce9e2dfcab"],

Cell[StyleData["CodeChapter", StyleDefinitions -> StyleData["Chapter"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Chapter:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellBracketOptions->{"Color"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 InitializationGroup->True,
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Chapter:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1175,
 MenuCommandKey->None,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"beb5e554-2cae-49a9-8f5b-5d7f21f40f56"],

Cell[StyleData["CodeSection", StyleDefinitions -> StyleData["Section"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Section:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, {{0, 0}, {0, 
   1}}],
 ShowGroupOpener->False,
 WholeCellGroupOpener->False,
 CellBracketOptions->{"Color"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSubsection", "Backspace" -> "CodeChapter"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 InitializationGroup->True,
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Section:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, {{0, 0}, {0, 
     1}}], CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], 
     GrayLevel[0.8]], "ReturnKeyDown" :> If[
     Not[
      MatchQ[
       NotebookRead[
        NextCell[]], 
       Cell[
        Blank[], "InputSection", 
        BlankNullSequence[]]]], SelectionMove[
       EvaluationCell[], After, Cell]; NotebookWrite[
       EvaluationNotebook[], 
       Cell[
        BoxData["Begin[\"`Private`\"];"], "InputSection"]]; NotebookWrite[
       EvaluationNotebook[], 
       Cell[
        BoxData["End[];"], "InputSection"]]]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], 
   GrayLevel[0.8]],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1255,
 MenuCommandKey->"4",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"8d4be717-2a1f-46ee-8050-dabf9399963d"],

Cell[StyleData["CodeSubsection", StyleDefinitions -> StyleData["Subsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsection:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{55, Inherited}, {Inherited, Inherited}},
 CellBracketOptions->{"HoverColor"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{"Tab" -> "CodeSubsubsection", "Backspace" -> "CodeSection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsection:: *)\n(*", "\[RightFloor]" -> 
     "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1305,
 MenuCommandKey->"5",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"97b10011-5bfc-4f98-9fb7-d4654c2755b4"],

Cell[StyleData["CodeSubsubsection", StyleDefinitions -> StyleData[
 "Subsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsection::Closed:: *)\n(*", "\[RightFloor]" -> 
   "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{59, Inherited}, {Inherited, Inherited}},
 CellBracketOptions->{"HoverColor"->RGBColor[0.6, 0.4, 0.9]},
 StyleKeyMapping->{
  "Tab" -> "CodeSubsubsubsection", "Backspace" -> "CodeSubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1105,
 MenuCommandKey->"6",
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"1da07cfc-b4e3-4e3d-8214-ebc77cf528b6"],

Cell[StyleData["CodeSubsubsubsection", StyleDefinitions -> StyleData[
 "Subsubsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsubsection::Closed:: *)\n(*", 
   "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{63, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->{
  "Tab" -> "CodeSubsubsubsubsection", "Backspace" -> "CodeSubsubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1355,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"d310ca5a-6d99-49ba-89ff-904e55ac1989"],

Cell[StyleData["CodeSubsubsubsubsection", StyleDefinitions -> StyleData[
 "Subsubsubsubsection"]],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Subsubsubsubsection::Closed:: *)\n(*", 
   "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 ShowGroupOpener->False,
 CellMargins->{{67, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->{"Backspace" -> "CodeSubsubsubsection"},
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Subsubsubsubsection::Closed:: *)\n(*", 
     "\[RightFloor]" -> "*)\n"}, CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], Inherited],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->1355,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"6dd06d3c-7546-47c1-bd0f-bacfe214fa23"],

Cell[StyleData["CodeInput", StyleDefinitions -> StyleData["Input"]],
 PageWidth->Infinity,
 ShowGroupOpener->False,
 CellMargins->{{67, Inherited}, {Inherited, Inherited}},
 StyleKeyMapping->None,
 CellEvaluationFunction->(Null& ),
 CellEventActions->{{"MenuCommand", "SelectionCloseAllGroups"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Indent"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], {
    "MenuCommand", "SelectionOpenAllGroups"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Dedent"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], {
    "MenuCommand", "InsertMatchingBrackets"} :> Quiet[
     Check[Needs["BTools`"]; Replace[
        Join[
         Names[
          StringJoin["BTools`", "IndentationEvent"]], 
         Names[
          StringJoin["BTools`", "*`IndentationEvent"]]], {{
           Pattern[BTools`Private`Package`f, 
            Blank[]], 
           BlankNullSequence[]} :> 
         ToExpression[BTools`Private`Package`f]["Toggle"], Blank[] :> 
         SetAttributes[
           EvaluationCell[], CellEventActions -> None]}], 
      SetAttributes[
       EvaluationCell[], CellEventActions -> None]]], PassEventsDown -> False},
 ShowCellLabel->False,
 AutoIndent->True,
 TabFilling->"_",
 LineSpacing->{0, 14},
 TabSpacings->1.5,
 AutoSpacing->False,
 LineIndent->1,
 MenuSortingValue->1505,
 MenuCommandKey->"`",
 FontSize->13,
 FontWeight->"Plain",ExpressionUUID->"e0dcca86-0bc3-49af-b437-2275af18587b"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"MakeIndentable", "@", 
   RowBox[{"PreviousCell", "[", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.71725342657089*^9, 
  3.717253429713491*^9}},ExpressionUUID->"efe54652-2d30-4b9a-a30e-\
d126dcd0f2be"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{
   RowBox[{"\"\<Code\>\"", "~~", "___"}], ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ShowGroupOpener", "\[Rule]", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontWeight", "\[Rule]", "\"\<Plain\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.738094621090701*^9, 3.7380946297527113`*^9}, {
   3.75000526679217*^9, 3.7500052854930153`*^9}, {3.750005845090378*^9, 
   3.750005857688715*^9}, 3.750005888166115*^9},
 CellLabel->"In[96]:=",ExpressionUUID->"2ccd2990-f903-4f04-8e94-51fb7f98a55b"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<CodeInput\>\"", ",", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StyleKeyMapping", "\[Rule]", "None"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MenuSortingValue", "\[Rule]", "1505"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MenuCommandKey", "\[Rule]", "\"\<`\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.709296415477832*^9, 3.709296427883548*^9}, 
   3.726971966431284*^9, {3.734638100173815*^9, 3.7346381136987963`*^9}, {
   3.734638191820404*^9, 3.7346382003223953`*^9}, 3.738094614531478*^9, {
   3.751830355052676*^9, 3.7518303596838408`*^9}, 3.751830392989221*^9, {
   3.7518304466278763`*^9, 3.751830484792054*^9}, {3.751831321709577*^9, 
   3.751831358769465*^9}, {3.751831446354993*^9, 
   3.751831453283099*^9}},ExpressionUUID->"85e8a440-ef63-4fe2-9f01-\
6e33f6b627fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StyleSheetEdit", "[", 
      RowBox[{
       RowBox[{"\"\<Code\>\"", "<>", "#"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"CellMargins", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"55", "+", 
             RowBox[{"4", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "-", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"#", "===", "\"\<Input\>\""}], ",", " ", "2", ",", 
                  " ", "1"}], "]"}]}], ")"}]}]}], ",", " ", "Inherited"}], 
           "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"Inherited", ",", " ", "Inherited"}], "}"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Append", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{"\"\<S\>\"", "\[Rule]", "\"\<Subs\>\""}], "]"}], ",", 
        "\"\<Subsection\>\"", ",", " ", "3"}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Input\>\""}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.738094621090701*^9, 3.7380946297527113`*^9}, {
  3.75000526679217*^9, 3.750005308389511*^9}, {3.7500054357644787`*^9, 
  3.7500054879111347`*^9}, {3.750005602326676*^9, 3.7500056429563007`*^9}, {
  3.750005683373413*^9, 3.750005744082568*^9}, {3.750005789157963*^9, 
  3.750005826338373*^9}, {3.75000591069986*^9, 3.7500059238877077`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"055704a2-dd7e-44ae-a37c-02e8eefbf40f"],

Cell["Eval Tracking", "Subsubsection",
 CellChangeTimes->{{3.731430054194949*^9, 
  3.731430056817024*^9}},ExpressionUUID->"b19d27c8-c71c-4143-beed-\
ba6ffd42c227"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Begin", "[", "\"\<FrontEnd`Private`EventTracking`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$escapeChars", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<\[LeftCeiling]\>\"", ",", "\"\<\[RightFloor]\>\""}], "}"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"leftEscape", "=", 
       RowBox[{"First", "@", "$escapeChars"}]}], ",", 
      RowBox[{"rightEscape", "=", 
       RowBox[{"Last", "@", "$escapeChars"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"StyleSheetEdit", "[", 
       RowBox[{"#", ",", "\[IndentingNewLine]", 
        RowBox[{"ShowCellLabel", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellEvaluationFunction", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"Function", "[", "\[IndentingNewLine]", 
          RowBox[{"Function", "@", "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"ev", "=", 
                RowBox[{"CurrentValue", "[", 
                 RowBox[{
                  RowBox[{"EvaluationCell", "[", "]"}], ",", "Evaluatable"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"text", "=", 
                RowBox[{"First", "@", 
                 RowBox[{"NotebookRead", "[", 
                  RowBox[{"EvaluationCell", "[", "]"}], "]"}]}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SelectionMove", "[", 
               RowBox[{
                RowBox[{"EvaluationCell", "[", "]"}], ",", 
                "\[IndentingNewLine]", "All", ",", "\[IndentingNewLine]", 
                "CellContents"}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"NotebookWrite", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"ev", "//", "TrueQ"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"StringTrim", "[", 
                   RowBox[{"text", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartOfString", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "leftEscape"}], ")"}], "|", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"rightEscape", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "EndOfString"}], ")"}]}]}], "\[IndentingNewLine]", "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"leftEscape", "<>", "text", "<>", "rightEscape"}]}],
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"SetOptions", "[", 
               RowBox[{
                RowBox[{"EvaluationCell", "[", "]"}], ",", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Evaluatable", "\[Rule]", 
                  RowBox[{"Not", "@", "ev"}]}], "\[IndentingNewLine]", 
                 "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"CellEventActions", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"DeleteDuplicatesBy", "[", "First", "]"}], "@", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"_Rule", "|", "_RuleDelayed"}], "]"}], "@", 
           "\[IndentingNewLine]", 
           RowBox[{"Flatten", "@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<MenuCommand\>\"", ",", "\"\<HandleShiftReturn\>\""}], 
                  "}"}], ":>", "\[IndentingNewLine]", 
                 RowBox[{"With", "[", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ev", "=", 
                    RowBox[{"CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"text", "=", 
                    RowBox[{"First", "@", 
                    RowBox[{"NotebookRead", "[", 
                    RowBox[{"EvaluationCell", "[", "]"}], "]"}]}]}]}], 
                    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                   
                   RowBox[{
                    RowBox[{"SelectionMove", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    "\[IndentingNewLine]", "All", ",", "\[IndentingNewLine]", 
                    "CellContents"}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"NotebookWrite", "[", 
                    RowBox[{
                    RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"ev", "//", "TrueQ"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"text", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartOfString", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "leftEscape"}], ")"}], "|", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"rightEscape", "~~", 
                    RowBox[{"(", 
                    RowBox[{"Whitespace", "|", "\"\<\>\""}], ")"}], "~~", 
                    "EndOfString"}], ")"}]}]}], "\[IndentingNewLine]", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    "leftEscape", "<>", "text", "<>", "rightEscape"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Evaluatable", "\[Rule]", 
                    RowBox[{"Not", "@", "ev"}]}], "\[IndentingNewLine]", 
                    "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"ExportAutoReplacements", "->", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"leftEscape", "\[Rule]", "\[IndentingNewLine]", 
                    RowBox[{"\"\<(* ::\>\"", "<>", 
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"#", ",", "\"\<Code\>\""}], "]"}], "<>", 
                    "\"\<::\>\"", "<>", "\[IndentingNewLine]", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"#", ",", "\"\<Code\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "\"\<Subsubsection\>\"", "|", 
                    "\"\<Subsubsubsection\>\""}], ",", "\[IndentingNewLine]", 
                    "\"\<Closed::\>\"", ",", "\[IndentingNewLine]", "_", ",", 
                    "\[IndentingNewLine]", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "]"}], "<>", 
                    "\[IndentingNewLine]", "\"\< *)\\n(*\>\""}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"rightEscape", "\[Rule]", "\"\<*)\\n\>\""}]}], 
                  "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
                
                RowBox[{"CellFrame", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"FEPrivate`If", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"FEPrivate`SameQ", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FrontEnd`CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"FEPrivate`Self", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}], ",", "\[IndentingNewLine]", 
                    "True"}], "\[IndentingNewLine]", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "\[Equal]", "\"\<CodeSection\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", "Inherited"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"CellFrameColor", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"FEPrivate`If", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"FEPrivate`SameQ", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FrontEnd`CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"FEPrivate`Self", "[", "]"}], ",", 
                    "Evaluatable"}], "]"}], ",", "\[IndentingNewLine]", 
                    "True"}], "\[IndentingNewLine]", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"GrayLevel", "[", ".95", "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "\[Equal]", "\"\<CodeSection\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GrayLevel", "[", ".8", "]"}], ",", 
                    "\[IndentingNewLine]", "Inherited"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"StyleSheetValue", "[", 
               RowBox[{"#", ",", "CellEventActions"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}]}]}]}]}], "\[IndentingNewLine]", 
       "]"}], "&"}], "/@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<CodeChapter\>\"", ",", "\"\<CodeSection\>\"", ",", 
       "\[IndentingNewLine]", "\"\<CodeSection\>\"", ",", 
       "\"\<CodeSubsection\>\"", ",", "\[IndentingNewLine]", 
       "\"\<CodeSubsubsection\>\"", ",", "\"\<CodeSubsubsubsection\>\"", ",", 
       "\[IndentingNewLine]", "\"\<Text\>\""}], "\[IndentingNewLine]", 
      "}"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.703736917276146*^9, 3.703737089238969*^9}, {
   3.7037419912383213`*^9, 3.703742020423052*^9}, {3.703742411392068*^9, 
   3.703742413120737*^9}, {3.703742917078529*^9, 3.7037429182128353`*^9}, {
   3.703743929808996*^9, 3.703743937726211*^9}, {3.703743972708601*^9, 
   3.703744004349695*^9}, {3.703744059697982*^9, 3.703744060010633*^9}, {
   3.7037441097902393`*^9, 3.7037441342774363`*^9}, {3.7037441731879177`*^9, 
   3.703744196224221*^9}, {3.703746513052899*^9, 3.7037465143382053`*^9}, {
   3.703746940539653*^9, 3.703746940754431*^9}, {3.703747197961206*^9, 
   3.703747199216054*^9}, {3.703747361538211*^9, 3.703747576098709*^9}, {
   3.703748032101754*^9, 3.7037480436323833`*^9}, {3.7037481974504223`*^9, 
   3.7037482182083063`*^9}, {3.703748464561307*^9, 3.703748525532406*^9}, {
   3.7037485653473597`*^9, 3.703748574839395*^9}, {3.703748607285345*^9, 
   3.703748611084371*^9}, {3.703749067817411*^9, 3.703749152449209*^9}, {
   3.7037492271444607`*^9, 3.7037492892059517`*^9}, {3.703749328581574*^9, 
   3.7037493846971416`*^9}, {3.703751972180211*^9, 3.703751972874411*^9}, {
   3.703760911770759*^9, 3.703760935814859*^9}, {3.70376108422173*^9, 
   3.703761201989459*^9}, 3.72697196645347*^9, {3.731430065231534*^9, 
   3.731430078716885*^9}},ExpressionUUID->"6f17af42-3b48-4691-8863-\
9d907751ce5b"],

Cell["Style Key Mapping", "Subsubsection",
 CellChangeTimes->{{3.731430110617981*^9, 
  3.7314301133685093`*^9}},ExpressionUUID->"decc80d6-e1cb-4d43-b6a9-\
79f4ac14fb06"],

Cell[BoxData[
 RowBox[{"<<", "BTools`All`"}]], "Input",
 CellChangeTimes->{{3.731430164077712*^9, 3.731430166152071*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"bd24c91b-acf4-401e-8d8d-c73ffd326386"],

Cell[BoxData[
 RowBox[{
  RowBox[{"codeSections", "=", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<CodeChapter\>\"", ",", "\"\<CodeSection\>\"", ",", 
     "\"\<CodeSubsection\>\"", ",", "\[IndentingNewLine]", 
     "\"\<CodeSubsubsection\>\"", ",", "\"\<CodeSubsubsubsection\>\"", ",", 
     "\[IndentingNewLine]", "\"\<CodeSubsubsubsubsection\>\""}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73143021000318*^9, 3.731430213768955*^9}, {
   3.731430812735969*^9, 3.731430818797453*^9}, 3.731431009599165*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"b98749a0-2ac9-4b7a-8f5c-fce5c6a4fbea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StyleSheetEdit", "[", 
      RowBox[{"#", ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"StyleKeyMapping", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", "=!=", "None"}], ",", " ", 
             RowBox[{"\"\<Tab\>\"", "\[Rule]", "#2"}], ",", " ", "Nothing"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#3", "=!=", "None"}], ",", " ", 
             RowBox[{"\"\<Backspace\>\"", "\[Rule]", "#3"}], ",", " ", 
             "Nothing"}], "]"}]}], "\[IndentingNewLine]", " ", "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"codeSections", ",", "\[IndentingNewLine]", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Rest", "@", "codeSections"}], ",", " ", "None"}], "]"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"Most", "@", "codeSections"}], ",", " ", "None"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.731430124296628*^9, 3.73143025251306*^9}, {
  3.731430824591393*^9, 3.731430828719112*^9}, {3.731430949625338*^9, 
  3.731430951068665*^9}, {3.7314309835737257`*^9, 3.7314310150270443`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"6093102c-d120-407f-80e0-e8cfd321b657"],

Cell["Standard", "Subsection",
 CellChangeTimes->{{3.701991960018416*^9, 
  3.701991961355*^9}},ExpressionUUID->"5934bd46-4293-46a7-92e8-cadcf5d5d3f0"],

Cell[StyleData["Section"],
 WholeCellGroupOpener->True,
 MenuCommandKey->"1",ExpressionUUID->"16fff4c4-f5c1-4e8a-bcdd-7970f5511b8a"],

Cell[StyleData["Subsection"],
 ShowGroupOpener->True,
 MenuCommandKey->"2",ExpressionUUID->"85b80b99-7e16-48bd-a63b-71503851e2df"],

Cell[StyleData["Subsubsection"],
 ShowGroupOpener->True,
 MenuCommandKey->"3",
 FontWeight->Plain,ExpressionUUID->"b97b6049-0731-4383-9d97-d80e251ed347"],

Cell[StyleData["Code"],
 ShowGroupOpener->False,
 MenuCommandKey->None,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",ExpressionUUID->"96dc421e-5acb-4749-a76a-3abe8c48e3f3"],

Cell[StyleData["CodeSeparator", StyleDefinitions -> StyleData["Input"]],
 Editable->False,
 CellFrame->{{0, 0}, {0, 1}},
 ShowCellBracket->Automatic,
 ShowGroupOpener->False,
 CellBracketOptions->{"OverlapContent"->True},
 Deployed->True,
 Evaluatable->False,
 CellGroupingRules->"InputGrouping",
 CellFrameMargins->{{0, 0}, {-6, -5}},
 CellFrameColor->GrayLevel[0.8],
 CellSize->{1, 1},
 DefaultFormatType->DefaultTextFormatType,
 FontFamily->"Source Sans Pro",
 FontWeight->"Plain",
 Background->GrayLevel[
  0.95],ExpressionUUID->"dced01c9-8784-4080-8be7-e887470769a4"],

Cell[StyleData["Text"],
 ExportAutoReplacements->{
  "\[LeftCeiling]" -> "(* ::Text:: *)\n(*", "\[RightFloor]" -> "*)\n"},
 CellFrame->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited],
 CellEvaluationFunction->(With[{FrontEnd`EventTracking`ev$ = CurrentValue[
      EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
      NotebookRead[
       EvaluationCell[]]]}, SelectionMove[
     EvaluationCell[], All, CellContents]; NotebookWrite[
     EvaluationNotebook[], 
     If[
      TrueQ[FrontEnd`EventTracking`ev$], 
      StringTrim[FrontEnd`EventTracking`text$, 
       Alternatives[
        StringExpression[StartOfString, 
         Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
        StringExpression["\[RightFloor]", 
         Alternatives[Whitespace, ""], EndOfString]]], 
      StringJoin[
      "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
   SetOptions[
     EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
   Null]& ),
 CellEventActions->{{"MenuCommand", "HandleShiftReturn"} :> 
   With[{FrontEnd`EventTracking`ev$ = CurrentValue[
        EvaluationCell[], Evaluatable], FrontEnd`EventTracking`text$ = First[
        NotebookRead[
         EvaluationCell[]]]}, SelectionMove[
       EvaluationCell[], All, CellContents]; NotebookWrite[
       EvaluationNotebook[], 
       If[
        TrueQ[FrontEnd`EventTracking`ev$], 
        StringTrim[FrontEnd`EventTracking`text$, 
         Alternatives[
          StringExpression[StartOfString, 
           Alternatives[Whitespace, ""], "\[LeftCeiling]"], 
          StringExpression["\[RightFloor]", 
           Alternatives[Whitespace, ""], EndOfString]]], 
        StringJoin[
        "\[LeftCeiling]", FrontEnd`EventTracking`text$, "\[RightFloor]"]]]; 
     SetOptions[
       EvaluationCell[], {Evaluatable -> Not[FrontEnd`EventTracking`ev$]}]; 
     Null], 
   ExportAutoReplacements -> {
    "\[LeftCeiling]" -> "(* ::Text:: *)\n(*", "\[RightFloor]" -> "*)\n"}, 
   CellFrame -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], {{0, 0}, {0, 1}}, Inherited], 
   CellFrameColor -> FEPrivate`If[
     FEPrivate`SameQ[
      FrontEnd`CurrentValue[
       FEPrivate`Self[], Evaluatable], True], 
     GrayLevel[0.95], Inherited]},
 ShowCellLabel->False,
 CellFrameColor->FEPrivate`If[
   FEPrivate`SameQ[
    FrontEnd`CurrentValue[
     FEPrivate`Self[], Evaluatable], True], 
   GrayLevel[0.95], 
   Inherited],ExpressionUUID->"8e4d3dc7-9f82-4e8d-bac6-f849a3da3c75"],

Cell[StyleData["Input"],
 StyleKeyMapping->{
  "*" -> "Item", "]" -> 
   "CodeInput"},ExpressionUUID->"640ed099-b3ec-4b6d-93cf-5bcf77e61dde"],

Cell["Custom", "Subsection",
 CellChangeTimes->{{3.701991978530724*^9, 
  3.701991979410685*^9}},ExpressionUUID->"9fd2fcb2-c250-4581-9e2a-\
6ed30819e70a"],

Cell[StyleData["SectionSeparator", Style -> "Section"],
 CellFrame->{{0, 0}, {2, 2}},
 CellMargins->{{0, 0}, {Inherited, Inherited}},
 CellBracketOptions->{"Color"->None,
 "OverlapContent"->True},
 Deployed->True,
 CellGroupingRules->{"GroupTogetherGrouping", 0},
 CellFrameColor->RGBColor[0, 0, 0.4],
 MenuCommandKey->"8",
 FontOpacity->0,
 Background->GrayLevel[
  0.9],ExpressionUUID->"a497a3e0-24fb-437e-8ed0-71edac7fe4b7"],

Cell[StyleData["InputChapter", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{27, Inherited}, {10, 15}},
 StyleKeyMapping->{"Tab" -> "InputSection"},
 CellGroupingRules->{"SectionGrouping", 30},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1575,ExpressionUUID->"e49df259-a7f0-4662-b4e2-b07117aa1b8b"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputChapter\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", " ", 
     RowBox[{"\"\<Tab\>\"", "\[Rule]", "\"\<InputSection\>\""}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
  3.7338049886958847`*^9, 3.7338050806028833`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"17d42216-23c9-4f84-a160-54b3d7421fc9"],

Cell[StyleData["InputSection", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{50.3477, 3.}, {8., 12.}},
 StyleKeyMapping->{"Backspace" -> "InputChapter", "Tab" -> "InputSubsection"},
 
 CellGroupingRules->{"SectionGrouping", 40},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1590,ExpressionUUID->"643a2f5f-b82a-485a-afce-0dc0ffc183df"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputSection\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Backspace\>\"", "\[Rule]", "\"\<InputChapter\>\""}], ",", 
      " ", 
      RowBox[{"\"\<Tab\>\"", "\[Rule]", "\"\<InputSubsection\>\""}]}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
  3.7338049886958847`*^9, 3.733805068619689*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"c36af897-fed2-49ea-a220-407030a0c09e"],

Cell[StyleData["InputSubsection", StyleDefinitions -> StyleData["Input"]],
 CellFrame->{{0, 0}, {1, 1}},
 CellMargins->{{66, Inherited}, {8, 12}},
 StyleKeyMapping->{"Backspace" -> "InputSection"},
 CellGroupingRules->{"SectionGrouping", 50},
 ShowCellLabel->False,
 CellFrameStyle->GrayLevel[0.95],
 DefaultNewCellStyle->"CodeInput",
 MenuSortingValue->
  1590,ExpressionUUID->"dae399a3-2375-472d-a4ed-4f128553b6db"],

Cell[BoxData[
 RowBox[{"StyleSheetEdit", "[", 
  RowBox[{"\"\<InputSubsection\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"StyleKeyMapping", "\[Rule]", 
    RowBox[{"{", " ", 
     RowBox[{"\"\<Backspace\>\"", "\[Rule]", "\"\<InputSection\>\""}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}, {
   3.7338049886958847`*^9, 3.733805085873375*^9}, 3.733805123928615*^9},
 CellLabel->"In[93]:=",ExpressionUUID->"716e1605-6a80-45bf-bca5-c8fabb7f1673"],

Cell["<<BTools`All`", "Input",
 CellChangeTimes->{{3.733804930657217*^9, 3.733804934869377*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"79f8482c-149e-4235-b5ba-d506e94d8b46"],

Cell[BoxData[
 RowBox[{"StyleSheetValue", "[", 
  RowBox[{"\"\<Subsubsection\>\"", ",", " ", "CellMargins"}], "]"}]], "Input",\

 CellChangeTimes->{{3.7338049241295357`*^9, 3.733804956389875*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"bc4fe889-63a6-47eb-9b70-af5b7c27da63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"66", ",", "Inherited"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "12"}], "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.7338049534240017`*^9, 3.733804957057424*^9}},
 CellLabel->"Out[86]=",ExpressionUUID->"4882a94f-c6c1-48c3-962a-2ba7b4c70320"]
}, Closed]]
}, Open  ]]
},
Saveable->True,
WindowSize->{798, 781},
WindowMargins->{{Automatic, 18}, {0, Automatic}},
TaggingRules->{"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"PrivateStylesheetFormatting.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 139, 1, 36, 84, 1, "StyleData", "StyleDefinitions", "",ExpressionUUID->"56c3b829-3e87-4fca-b174-674893c27589"],
Cell[700, 23, 205, 3, 30, "Input",ExpressionUUID->"07809128-ebcb-4b55-b4b4-3da5baa01559"],
Cell[CellGroupData[{
Cell[930, 30, 178, 3, 67, "Title",ExpressionUUID->"298eaa4b-824a-4ec2-84c8-b9e321c6e15d"],
Cell[CellGroupData[{
Cell[1133, 37, 157, 3, 49, "Section",ExpressionUUID->"1fe9ccd2-628c-47eb-9260-95ded004007a"],
Cell[CellGroupData[{
Cell[1315, 44, 158, 3, 45, "Subsection",ExpressionUUID->"088722cc-907e-4407-9acc-dc36d07ba5db"],
Cell[CellGroupData[{
Cell[1498, 51, 1002, 26, 36, 27, 0, "StyleData", "Notebook", "All",ExpressionUUID->"dae0ac5e-c163-4524-a1f7-575a71d0b872"],
Cell[2503, 79, 1789, 36, 346, "Input",ExpressionUUID->"3e72e2b8-cdb6-49dc-9bea-e1f533785260"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4353, 122, 158, 3, 49, "Section",ExpressionUUID->"8414895d-8028-4762-90a4-b8d67da0ee47"],
Cell[4514, 127, 187, 3, 38, 77, 0, "StyleData", "CommentStyle", "All",ExpressionUUID->"1a850dfc-0af0-458c-8f2c-c2ffd49ec5e4"],
Cell[4704, 132, 177, 3, 36, 85, 1, "StyleData", "UndefinedSymbolStyle", "All",ExpressionUUID->"43c9240e-ab1f-45fe-9ce6-be76e4b3c247"],
Cell[4884, 137, 322, 8, 36, 74, 0, "StyleData", "StringStyle", "All",ExpressionUUID->"1866a658-30eb-4f54-ace0-046875d191b8"],
Cell[5209, 147, 160, 2, 35, 74, 0, "StyleData", "GlobalStyle", "All",ExpressionUUID->"6e76c86f-cdd0-4124-ae38-b2d69a5f7991"]
}, Closed]],
Cell[CellGroupData[{
Cell[5406, 154, 154, 3, 33, "Section",ExpressionUUID->"ded4c0e9-5971-4f1b-a890-3778b5a3c9ec"],
Cell[5563, 159, 164, 3, 45, "Subsection",ExpressionUUID->"d9041244-82eb-474d-9d8f-540f9ad18c82"],
Cell[5730, 164, 102, 1, 113, 24, 0, "StyleData", "Title", "All",ExpressionUUID->"1cc20631-994a-4339-b070-e892449ffe7f",
 MenuCommandKey->None],
Cell[5835, 167, 104, 1, 84, 26, 0, "StyleData", "Chapter", "All",ExpressionUUID->"dd184da4-eca6-4475-8a19-31e63dd0cd48",
 MenuCommandKey->None],
Cell[5942, 170, 107, 1, 63, 29, 0, "StyleData", "Subchapter", "All",ExpressionUUID->"ae6b18b2-e466-4039-876b-f17e67b391de",
 MenuCommandKey->None],
Cell[6052, 173, 152, 3, 29, "Subsection",ExpressionUUID->"e8393492-53e6-4dd2-a660-c2ce9e2dfcab"],
Cell[6207, 178, 2978, 70, 84, 72, 0, "StyleData", "CodeChapter", "All",ExpressionUUID->"beb5e554-2cae-49a9-8f5b-5d7f21f40f56",
 MenuSortingValue->1175,
 MenuCommandKey->None],
Cell[9188, 250, 3525, 88, 68, 72, 0, "StyleData", "CodeSection", "All",ExpressionUUID->"8d4be717-2a1f-46ee-8050-dabf9399963d",
 MenuSortingValue->1255,
 MenuCommandKey->"4"],
Cell[12716, 340, 3061, 70, 49, 78, 0, "StyleData", "CodeSubsection", "All",ExpressionUUID->"97b10011-5bfc-4f98-9fb7-d4654c2755b4",
 MenuSortingValue->1305,
 MenuCommandKey->"5"],
Cell[15780, 412, 3104, 73, 48, 86, 1, "StyleData", "CodeSubsubsection", "All",ExpressionUUID->"1da07cfc-b4e3-4e3d-8214-ebc77cf528b6",
 MenuSortingValue->1105,
 MenuCommandKey->"6"],
Cell[18887, 487, 3038, 71, 43, 92, 1, "StyleData", "CodeSubsubsubsection", "All",ExpressionUUID->"d310ca5a-6d99-49ba-89ff-904e55ac1989",
 MenuSortingValue->1355],
Cell[21928, 560, 3014, 70, 42, 98, 1, "StyleData", "CodeSubsubsubsubsection", "All",ExpressionUUID->"6dd06d3c-7546-47c1-bd0f-bacfe214fa23",
 MenuSortingValue->1355],
Cell[24945, 632, 2321, 61, 37, 68, 0, "StyleData", "CodeInput", "All",ExpressionUUID->"e0dcca86-0bc3-49af-b437-2275af18587b",
 MenuSortingValue->1505,
 MenuCommandKey->"`"],
Cell[27269, 695, 247, 6, 30, "Input",ExpressionUUID->"efe54652-2d30-4b9a-a30e-d126dcd0f2be"],
Cell[27519, 703, 658, 13, 115, "Input",ExpressionUUID->"2ccd2990-f903-4f04-8e94-51fb7f98a55b"],
Cell[28180, 718, 923, 18, 115, "Input",ExpressionUUID->"85e8a440-ef63-4fe2-9f01-6e33f6b627fc"],
Cell[29106, 738, 1841, 41, 220, "Input",ExpressionUUID->"055704a2-dd7e-44ae-a37c-02e8eefbf40f"],
Cell[30950, 781, 164, 3, 44, "Subsubsection",ExpressionUUID->"b19d27c8-c71c-4143-beed-ba6ffd42c227"],
Cell[31117, 786, 13396, 263, 2194, "Input",ExpressionUUID->"6f17af42-3b48-4691-8863-9d907751ce5b"],
Cell[44516, 1051, 170, 3, 28, "Subsubsection",ExpressionUUID->"decc80d6-e1cb-4d43-b6a9-79f4ac14fb06"],
Cell[44689, 1056, 199, 3, 30, "Input",ExpressionUUID->"bd24c91b-acf4-401e-8d8d-c73ffd326386"],
Cell[44891, 1061, 664, 12, 136, "Input",ExpressionUUID->"b98749a0-2ac9-4b7a-8f5c-fce5c6a4fbea"],
Cell[45558, 1075, 1696, 37, 325, "Input",ExpressionUUID->"6093102c-d120-407f-80e0-e8cfd321b657"],
Cell[47257, 1114, 151, 2, 45, "Subsection",ExpressionUUID->"5934bd46-4293-46a7-92e8-cadcf5d5d3f0"],
Cell[47411, 1118, 132, 2, 82, 26, 0, "StyleData", "Section", "All",ExpressionUUID->"16fff4c4-f5c1-4e8a-bcdd-7970f5511b8a",
 MenuCommandKey->"1"],
Cell[47546, 1122, 130, 2, 53, 29, 0, "StyleData", "Subsection", "All",ExpressionUUID->"85b80b99-7e16-48bd-a63b-71503851e2df",
 MenuCommandKey->"2"],
Cell[47679, 1126, 153, 3, 52, 32, 0, "StyleData", "Subsubsection", "All",ExpressionUUID->"b97b6049-0731-4383-9d97-d80e251ed347",
 MenuCommandKey->"3"],
Cell[47835, 1131, 180, 4, 61, 23, 0, "StyleData", "Code", "All",ExpressionUUID->"96dc421e-5acb-4749-a76a-3abe8c48e3f3",
 MenuCommandKey->None],
Cell[48018, 1137, 572, 16, 15, 72, 0, "StyleData", "CodeSeparator", "All",ExpressionUUID->"dced01c9-8784-4080-8be7-e887470769a4"],
Cell[48593, 1155, 2640, 63, 50, 23, 0, "StyleData", "Text", "All",ExpressionUUID->"8e4d3dc7-9f82-4e8d-bac6-f849a3da3c75"],
Cell[51236, 1220, 141, 3, 42, 24, 0, "StyleData", "Input", "All",ExpressionUUID->"640ed099-b3ec-4b6d-93cf-5bcf77e61dde"],
Cell[51380, 1225, 154, 3, 45, "Subsection",ExpressionUUID->"9fd2fcb2-c250-4581-9e2a-6ed30819e70a"],
Cell[51537, 1230, 427, 11, 56, 55, 0, "StyleData", "SectionSeparator", "All",ExpressionUUID->"a497a3e0-24fb-437e-8ed0-71edac7fe4b7",
 MenuCommandKey->"8"],
Cell[51967, 1243, 409, 9, 72, 71, 0, "StyleData", "InputChapter", "All",ExpressionUUID->"e49df259-a7f0-4662-b4e2-b07117aa1b8b",
 MenuSortingValue->1575],
Cell[52379, 1254, 491, 9, 73, "Input",ExpressionUUID->"17d42216-23c9-4f84-a160-54b3d7421fc9"],
Cell[52873, 1265, 444, 10, 67, 71, 0, "StyleData", "InputSection", "All",ExpressionUUID->"643a2f5f-b82a-485a-afce-0dc0ffc183df",
 MenuSortingValue->1590],
Cell[53320, 1277, 597, 12, 73, "Input",ExpressionUUID->"c36af897-fed2-49ea-a220-407030a0c09e"],
Cell[53920, 1291, 417, 9, 67, 74, 0, "StyleData", "InputSubsection", "All",ExpressionUUID->"dae399a3-2375-472d-a4ed-4f128553b6db",
 MenuSortingValue->1590],
Cell[54340, 1302, 524, 9, 73, "Input",ExpressionUUID->"716e1605-6a80-45bf-bca5-c8fabb7f1673"],
Cell[54867, 1313, 175, 2, 30, "Input",ExpressionUUID->"79f8482c-149e-4235-b5ba-d506e94d8b46"],
Cell[55045, 1317, 275, 5, 30, "Input",ExpressionUUID->"bc4fe889-63a6-47eb-9b70-af5b7c27da63"],
Cell[55323, 1324, 356, 9, 34, "Output",ExpressionUUID->"4882a94f-c6c1-48c3-962a-2ba7b4c70320"]
}, Closed]]
}, Open  ]]
}
]
*)

