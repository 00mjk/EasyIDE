(* ::Package:: *)

(* Autogenerated Package *)

TabObject::usage="";
CreateTabRow::usage="";


NotebookCreateTab::usage="";
NotebookSwitchTab::usage="";
NotebookCloseTab::usage="";


IDETabExists::usage="Not sure where else this one would live...?";
IDETabNames::usage="Not sure where else this one would live...?"
IDETabNameFiles::usage="Not sure where else this one would live...?"


IDESwitchTab::usage="Switches the IDE tab";


$TabCacheDir::usage="";
CacheTabData::usage="";
LoadCachedTabData::usage="";
ClearCachedTabData::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*TabCaching*)



(* ::Subsubsection::Closed:: *)
(*$TabCacheDir*)



If[!ValueQ[$TabCacheDir],
  $TabCacheDir = FileNameJoin@{$TemporaryDirectory, "EasyIDE", "tab_cache"}
  ];


(* ::Subsubsection::Closed:: *)
(*LoadCachedTabData*)



LoadCachedTabData//Clear
LoadCachedTabData[nb_, tabName_String]:=
  loadTabCacheData[IDEData[nb, {"Tabs", tabName, "File"}]];
LoadCachedTabData[nb_]:=
  LoadCachedTabData[nb, IDEData[nb, "ActiveTab"]];


(* ::Subsubsubsection::Closed:: *)
(*tabCacheFile*)



tabCacheFile[fileName_]:=
  Module[{ef =ExpandFileName[fileName],  hashName},
    If[!DirectoryQ[$TabCacheDir], 
      CreateDirectory[$TabCacheDir, CreateIntermediateDirectories->True]
      ];
    hashName = FileNameJoin@{$TabCacheDir, ToString[Hash[ef]]<>".mx"}
    ];


checkTabCache[fileName_]:=
  With[{f=tabCacheFile[fileName]},
    If[FileExistsQ[f]&&TrueQ[FileDate[f]>FileDate[fileName]],
      f,
      None
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*loadTabCacheData*)



loadTabCacheData[fileName_String]:=
  Replace[checkTabCache[fileName], s_String:>Quiet@Import[s]];
loadTabCacheData[e_]:=
  None;


setTabCacheData[fileName_String, data_]:=
  Export[tabCacheFile[fileName], data, "MX"];
setTabCacheData[e__]:=
  $Failed;


(* ::Subsubsection::Closed:: *)
(*CacheTabData*)



CacheTabData//Clear
CacheTabData[nb_, tabName_String, data_]:=
  setTabCacheData[IDEData[nb, {"Tabs", tabName, "File"}], data];
CacheTabData[nb_, tabName_String]:=
  CacheTabData[nb, tabName, 
    GetNotebookExpression[nb]
    ];
CacheTabData[nb_]:=
  CacheTabData[nb, IDEData[nb, "ActiveTab"]];
CacheTabData[e___]:=
  $Failed;


(* ::Subsubsection::Closed:: *)
(*ClearCachedTabData*)



ClearCachedTabData//Clear;
ClearCachedTabData[nb_, tabName_]:=
  Quiet[DeleteFile@tabCacheFile@IDEData[nb, {"Tabs", tabName, "File"}]];
ClearCachedTabData[nb_]:=
  ClearCachedTabData[nb, IDEData[nb, "ActiveTab"]];


(* ::Subsection:: *)
(*TabData*)



(* ::Subsubsection::Closed:: *)
(*ideSetTab*)



ideSetTab[nb_, tabName_]:=
  IDEData[nb, "ActiveTab"] = tabName;


(* ::Subsubsection::Closed:: *)
(*IDETabNames*)



IDETabNames[nb_]:=
  Keys@IDEData[nb, "Tabs", {}];


(* ::Subsubsection::Closed:: *)
(*IDETabNameFiles*)



IDETabNameFiles[nb_]:=
  {Keys[#], Lookup[Values[#], "File", {}]}&@
    IDEData[nb, "Tabs", {}];


(* ::Subsubsection::Closed:: *)
(*IDETabExists*)



ideTabExists[nb_, tab_]:=
  ListQ@IDEData[nb, {"Tabs", tab}];
IDETabExists[nb_, tab_]:=
  ListQ@IDEData[nb, {"Tabs", tab}];


(* ::Subsection:: *)
(*Tab Objects*)



(* ::Subsubsection::Closed:: *)
(*CreateTabRow*)



CreateTabRow[refresh_]:=
  With[
    {
      tns=
        Quiet@Block[
          {CurrentValue=cv}, 
          IDETabNameFiles[FrontEnd`EvaluationNotebook[]]
          ]
      },
    Dynamic[
      refresh;
      Panel[
       Pane[
          Grid@List@MapThread[TabObject, tns], 
          BaseStyle->"TabbingRow"
          ],
       BaseStyle->"TabbingRow"
      ],
      TrackedSymbols:>{refresh}
      ]/.cv->CurrentValue
    ]


(* ::Subsubsection::Closed:: *)
(*TabObject*)



TabObject[tabName_String, file_]:=
With[
  {
    c=
              Block[
                {MathLink`CallFrontEnd=Identity}, 
                First@IDEData[FrontEnd`EvaluationNotebook[], "ActiveTab"]
                ],
            c2=
              Block[
                {MathLink`CallFrontEnd=Identity}, 
                First@IDEData[FrontEnd`EvaluationNotebook[], {"Tabs", tabName, "Modified"}]
                ]
            },
    Style[
      Panel[
        Grid[
          List@{
            MouseAppearance[
              RawBoxes@ButtonBox[
                ToBoxes@
              Tooltip[
                Pane[
                  tabName, 
                  BaseStyle->
                    FEPrivate`Which[
                        FEPrivate`SameQ[c, tabName],
                          "TabNameActive",
                      FEPrivate`SameQ[c2, True], 
                        {"TabModified", "TabName"}, 
                      True,
                        "TabName"
                      ]
                  ], 
                file
                ],
                BaseStyle->"TabName",
                ButtonData->tabName
                ],
              "LinkHand"
              ],
            RawBoxes@ButtonBox["", 
              BaseStyle->"TabCloseButton",
              ButtonData->tabName
              ]
            }
          ],
        BaseStyle->
            FEPrivate`Which[
              FEPrivate`SameQ[c, tabName], 
                "TabPanelActive",
              FEPrivate`SameQ[c2, True],
                {"TabModified", "TabPanelBackground"},
            True,
                "TabPanelBackground"
              ],
        BoxID->tabName<>"-tab"
        ],
      ContextMenu->FileEntryContextMenu[file]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*refreshTabs*)



refreshTabs[nb_]:=
  Replace[
    IDEData[nb, PrivateKey["TabsRefreshHandle"]],
    Hold[var_]:>(var=RandomReal[])
    ];


(* ::Subsection:: *)
(*Tabbing*)



(* ::Subsubsection::Closed:: *)
(*NotebookCreateTab*)



NotebookCreateTab[nb_NotebookObject, tabName_String, tabData_]:=
  (
    IDEData[nb, {"Tabs", tabName}] = tabData;
    refreshTabs[]
    )


(* ::Subsubsection::Closed:: *)
(*NotebookSwitchTab*)



NotebookSwitchTab//Clear;
Options[NotebookSwitchTab]=
  {
    "UseCache"->True,
    "SaveCurrent"->False,
    "SaveSettings"->False
    };
NotebookSwitchTab[nb_NotebookObject, tabName_String, 
  ops:OptionsPattern[]
  ]:=
  WithoutScreenUpdates[
    nb,
    Module[
      {
        file,
        active = IDEData[nb, "ActiveTab"],
        actFile,
        cached,
        modTime,
        buffer,
        tst,
        nbExpr
        },
      If[active =!= tabName,
        If[active=!=None,
          buffer = Quantity[3, "Seconds"];
          modTime =
            FromAbsoluteTime[
              Lookup[NotebookInformation[nb], "MemoryModificationTime"],
              TimeZone->0
              ] - buffer;
          actFile = IDEData[nb, {"Tabs", active, "File"}];
          (* my own version of a MemoryModificationTime just to check when the tab was switched to *)
          tst = IDEData[nb, PrivateKey[active<>"_TabSwitchTime"]];
          IDEData[nb, {"Tabs", active, "Modified"}] = 
            If[TrueQ[modTime <= FileDate[actFile]],
              False,
              TrueQ[tst<=modTime]||
                TrueQ[IDEData[nb, {"Tabs", active, "Modified"}]]
              ]
           ];
        If[OptionValue["UseCache"],
          If[Length[Cells[nb]]>0,
            MathLink`CallFrontEnd@{
              FrontEnd`SelectionMove[nb, Previous, Cell],
              FrontEnd`SelectionAddCellTags[nb, {"EasyIDEScrollTag"}]
              };
               ];
          CacheTabData[nb, active, GetNotebookExpression[nb]];
          cached = LoadCachedTabData[nb, tabName];
          ];
        WithoutDynamics[
         nb,
         IDEData[nb, PrivateKey[tabName<>"_TabSwitchTime"]] = Now;
          If[OptionValue["SaveCurrent"], 
            IDESave[nb, 
              "AutoGenerateSave"->False,
              "HandleSavingAction"->False
              ]
            ];
          file = IDEData[nb, {"Tabs", tabName, "File"}];
          NotebookPutFile[nb, file, 
            Replace[cached, Except[_Notebook]->None]
            ];
          Replace[
            MathLink`CallFrontEnd@
              FrontEnd`NotebookFindReturnObject[nb, "EasyIDEScrollTag", 
                Next, CellTags, WrapAround->True
                ],
            Except[$Failed]:>
              MathLink`CallFrontEnd@{
                FrontEnd`SelectionMove[nb, After, Notebook],
                FrontEnd`NotebookFind[nb, "EasyIDEScrollTag", 
                  Next, CellTags, WrapAround->True
                  ],
                FrontEnd`SelectionRemoveCellTags[nb, {"EasyIDEScrollTag"}],
                FrontEnd`SelectionMove[nb, After, Cell]
                }
              ];
          ideSetTab[nb, tabName];
          ];
        If[OptionValue["SaveSettings"], 
          NotebookSave[nb](* note that we don't invoke any of the other processing here *);
          ];
        ];
      ]
    ];
NotebookSwitchTab[nb_NotebookObject, tabName_String, saveCurrent:True|False]:=
  NotebookSwitchTab[nb, tabName, "SaveCurrent"->saveCurrent];


(* ::Subsubsection::Closed:: *)
(*NotebookCloseTab*)



NotebookCloseTab//Clear
Options[NotebookCloseTab]=
  {
    "ClearCache"->True,
    "SaveCurrent"->True
    };
NotebookCloseTab[nb_NotebookObject, tabName_String, ops:OptionsPattern[]]:=
  Module[
    {
      active = IDEData[nb, "ActiveTab"],
      tabs = IDEData[nb, "Tabs"]
      },
    If[MemberQ[Keys@tabs, tabName],
      WithNotebookPaused[
        nb,
        tabs = DeleteCases[tabs, tabName->_];
        If[OptionValue["ClearCache"],
          ClearCachedTabData[nb, tabName]
          ];
        If[tabName == active,
          If[OptionValue["SaveCurrent"], 
            NotebookSaveContents[nb, 
                "AutoGenerateSave"->False,
                "HandleSavingAction"->False
                ]
              ];
          If[Length@tabs > 0,
            NotebookSwitchTab[nb, Keys[tabs][[1]], "SaveCurrent"->False],
            NotebookPutContents[nb, Notebook[{}]];
            IDEData[nb, "ActiveTab"] = None;
            ]
          ];
        IDEData[nb, "Tabs"] = tabs;
        ];
      refreshTabs[]
      ]
    ];
NotebookCloseTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  NotebookCloseTab[nb, tabName, "SaveCurrent"->saveCurrent]


(* ::Subsection:: *)
(*IDE*)



(* ::Subsubsection::Closed:: *)
(*IDESwitchTab*)



IDESwitchTab[nb_NotebookObject, tagName_]:=
  NotebookSwitchTab[nb, tagName];
IDESwitchTab[ide_IDENotebookObject, tagName_]:=
  IDESwitchTab[ide["Notebook"], tagName];


End[];



