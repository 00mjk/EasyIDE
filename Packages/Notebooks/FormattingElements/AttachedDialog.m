(* ::Package:: *)

(* Autogenerated Package *)

AttachedDialogPanel::usage="";
AttachedDialogInputPanel::usage="";
CreateAttachedDialog::usage="";
  CreateAttachedInputDialog::usage="";


IDECreateDialog::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*CreateAttachedDialog*)



(* ::Subsubsection::Closed:: *)
(*AttachedDialogPanel*)



AttachedDialogPanel[
  expr_,
  ops:OptionsPattern[]
  ]:=
  Panel[
    expr,
    BaseStyle->"AttachedDialog",
    ops
    ];


prepSubmitButton[{label_, action_, ops___}]:=
  Button[label, action,
    ops,
    BaseStyle->"AttachedDialogDefaultButton",
    Appearance->Inherited,
    Evaluator->Inherited,
    Method->Inherited
    ];
prepCancelButton[{label_, action_, ops___}]:=
  With[{act=If[action===Automatic, NotebookDelete[EvaluationCell[]]&, action]},
    Button[label, 
      act,
      ops,
      BaseStyle->"AttachedDialogCancelButton",
      Appearance->Inherited,
      Evaluator->Inherited,
      Method->Inherited
      ]
    ]


iAttachedDialogPanel[
  header_,
  expr_,
  submitButton:{_, _Function|None, ___}:{"OK", None},
  closingButton:{_, _Function|Automatic, ___}:{"Cancel", Automatic},
  ops:OptionsPattern[]
  ]:=
  AttachedDialogPanel[
    Grid[
      {
        {Panel[Pane[header], BaseStyle->"AttachedDialogHeader"]},
        {Panel[expr, BaseStyle->"AttachedDialogBody"]},
        {
          Panel[
            Grid[
              {
                {
                  prepSubmitButton@submitButton, 
                  prepCancelButton@closingButton
                  }
                },
              GridBoxItemSize->Inherited
              ], 
            BaseStyle->"AttachedDialogButtons"
            ]
          }
        },
      GridBoxItemSize->Inherited
      ],
    ops
    ];


AttachedDialogPanel[
  a_Association,
  ops:OptionsPattern[]
  ]:=
  iAttachedDialogPanel[
    Lookup[a, "Header", ""],
    Lookup[a, "Body"],
    Lookup[a, "SubmitButton", 
      {
        "OK",
        Lookup[a, "SubmitAction", None]
        }
      ],
    Lookup[a, "CancelButton", 
      {
        "Cancel",
        Lookup[a, "CancelAction", Automatic]
        }
      ],
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*AttachedDialogInputPanel*)



(* ::Subsubsubsection::Closed:: *)
(*createInputFieldElement*)



createInputFieldElement//Clear


createInputFieldElementName[None]:=
  Nothing;
createInputFieldElementName[fieldName_]:=
  Item[Row@{Spacer[15], fieldName, ":"}, 
    Alignment->Right
    ];
createInputFieldElementDescription[fieldDescription_]:=
  fieldDescription;


createInputFieldElement[
  Dynamic[var_],
  fieldID_, 
  fieldName_,
  fieldDescription_,
  default_,
  ops___
  ]:=
    {
      {
        createInputFieldElementName[fieldName],
        var[fieldID]=default;
        InputField[
          Dynamic[var[fieldID]],
          String,
          ops,
          BoxID->fieldID
          ]
       },
     If[fieldDescription=!=None,
       {"", createInputFieldElementDescription@fieldDescription},
       Nothing
       ]
     }


createInputFieldElement[
  d:Verbatim[Dynamic][var_],
  e:Except[_Association|_List]
  ]:=
  {
    {Pane[e, BaseStyle->"AttachedDialog"], SpanFromLeft}
    };
createInputFieldElement[
  d:Verbatim[Dynamic][var_],
  l_List
  ]:=
  Map[
    Pane[#, BaseStyle->"AttachedDialog"]&,
    l,
    {2}
    ];
createInputFieldElement[
  d:Verbatim[Dynamic][var_],
  a_Association
  ]:=
  Module[
    {
      fid,
      fname,
      fieldDescription,
      default,
      ops
      },
    fid = 
      Lookup[a, "ID",
        Lookup[a, "Name", CreateUUID[]]
        ];
    fname = 
      Lookup[a, "Name", fid];
    fieldDescription = 
      Lookup[a, "Description", None];
    default =
      Lookup[a, "Default", ""];
    ops =
      Lookup[a, "Options", {}];
    createInputFieldElement[
      d,
      fid,
      fname,
      fieldDescription,
      default,
      Sequence@@Flatten@{ops}
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*createInputFields*)



createInputFields[
  Dynamic[var_],
  specs_
  ]:=
  createInputFieldElement[Dynamic[var], #]&/@specs;


(* ::Subsubsubsection::Closed:: *)
(*createInputFieldDialog*)



createInputFieldDialog[
  Dynamic[var_],
  fields_
  ]:=
  Grid[
    Join@@createInputFields[Dynamic[var], fields],
    GridBoxItemSize->Inherited,
    BaseStyle->"AttachedDialogInput"
    ];


(* ::Subsubsubsection::Closed:: *)
(*attachedDialogInputSpec*)



attachedDialogInputSpec[
  a_Association
  ]:=
  With[
    {
      s=Lookup[a, "State", None],
      fields = Flatten@List@Lookup[a, "Fields", {}]
      },
    Merge[
      {
        "Body"->
          If[s===None,
            DynamicModule[{state=<||>},
              createInputFieldDialog[
                Dynamic[state],
                fields
                ]
              ],
            createInputFieldDialog[
              s,
              fields
              ]
           ],
       a,
       "SubmitAction"->
         (NotebookDelete[EvaluationCell[]]&)
       },
     First
     ]
   ]


(* ::Subsubsubsection::Closed:: *)
(*AttachedDialogInputPanel*)



AttachedDialogInputPanel[
  a_Association,
  ops:OptionsPattern[]
  ]:=
  AttachedDialogPanel[
    attachedDialogInputSpec[a],
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*createAttachSpec*)



attachSpecData=
  <|
    "Position"->
      <|"Pattern"->{_?NumberQ|_Scaled, _?NumberQ|_Scaled}, "Default"->{0, 0}|>,
    "Alignment"->
      <|"Pattern"->{Left|Center|Right, Bottom|Center|Top}, "Default"->{Center, Center}|>,
    "Anchor"->
      <|"Pattern"->{Left|Center|Right, Bottom|Center|Top}, "Default"->{Center, Center}|>,
    "ClosingActions"->
      <|"Pattern"->{("MouseExit"|"OutsideMouseClick"|"EvaluatorQuit")..}, 
        "Default"->{"EvaluatorQuit"}|>
    |>;


 createAttachSpec[a_Association]:=
  Merge[
    {
      KeyValueMap[
        #->
          Replace[#2,
            Except[Lookup[attachSpecData[#], "Pattern"]]->
              Lookup[attachSpecData[#], "Default"]
            ]&,
        KeyTake[a, Keys[attachSpecData]]
        ],
      #Default&/@attachSpecData
      },
    First
    ];
createAttachSpec[Automatic]:=
  createAttachSpec[<||>]


(* ::Subsubsection::Closed:: *)
(*insertCloseBox*)



insertCloseBox[panel_]:=
  ReplaceAll[
    Grid[
      {
        {Panel[h_, BaseStyle->"AttachedDialogHeader"]},
        r___
        },
      o___
      ]:>
      Grid[
        {
          {
            Panel[
              Grid[
                {{
                  "",
                  h,
                  RawBoxes@ButtonBox["", BaseStyle->"AttachedDialogCloseButton"]
                  }},
                BaseStyle->"AttachedDialogCloseButtonRow",
                GridBoxItemSize->Inherited
                ],
             BaseStyle->"AttachedDialogHeader"
             ]
            },
          r
          },
        o
        ]
    ];


(* ::Subsubsection::Closed:: *)
(*CreateAttachedDialog*)



attachables=
  _NotebookObject|_FrontEnd`EvaluationNotebook|_FrontEnd`InputNotebook|
  _FrontEnd`SelectedNotebook|_FrontEnd`ParentNotebook|_FrontEnd`ButtonNotebook|
  _CellObject|_FrontEnd`EvaluationCell|_FrontEnd`ParentCell|_FrontEnd`IndexedCell|
  _BoxObject|_FrontEnd`EvaluationBox|_FrontEnd`ParentBox;


CreateAttachedDialog//Clear
Options[CreateAttachedDialog]=
  {
    "CreateCloseButton"->True
    };
CreateAttachedDialog[
  nb:attachables, 
  expression_, 
  cellType:_String:"AttachedDialogCell",
  a:_Association|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  With[
    {
      sepc=createAttachSpec[a],
      panel=
        AttachedDialogPanel[expression]},
    FEAttachCell[
      nb,
      Cell[
        panel//
          If[Quiet[TrueQ@OptionValue["CreateCloseButton"]],
            insertCloseBox,
            Identity
            ]//ToBoxes//BoxData,
        cellType,
        FirstCase[
          panel,
          i:InputField[___, BoxID->boxID_, ___]:>
            ( 
              CellDynamicExpression:>
                Refresh[
                 SelectionMove[EvaluationCell[], Next, Word,
                   AutoScroll->False
                   ];
                  FE`Evaluate@
                    FrontEnd`MoveCursorToInputField[
                       EvaluationNotebook[], 
                        boxID
                        ],
                    None
                  ]
              ),
          Sequence@@{},
          Infinity
          ],
        ops
        ],
      Offset[sepc["Position"], 0],
      sepc["Alignment"],
      sepc["Anchor"],
      sepc["ClosingActions"]
      ]
    ];
CreateAttachedDialog[ 
  expression:Except[attachables], 
  cellType:_String:"AttachedDialogCell",
  a:_Association|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  CreateAttachedDialog[
    $CurrentIDENotebook,
    expression,
    cellType,
    a,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*CreateAttachedInputDialog*)



CreateAttachedInputDialog//Clear
CreateAttachedInputDialog[
  nb:attachables, 
  fields_Association, 
  cellType:_String:"AttachedDialogCell",
  a:_Association|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  CreateAttachedDialog[
    nb, 
    attachedDialogInputSpec[fields],
    cellType,
    a,
    ops
    ];
CreateAttachedInputDialog[ 
  fields_Association, 
  cellType:_String:"AttachedDialogCell",
  a:_Association|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
CreateAttachedInputDialog[
    $CurrentIDENotebook,
    fields,
    cellType,
    a,
    ops
    ]


(* ::Subsection:: *)
(*IDECreateDialog*)



IDECreateDialog[nb_NotebookObject, expr_, args___]:=
  CreateAttachedDialog[nb, expr, args];
IDECreateDialog[ide_IDENotebookObject, expr_, args___]:=
  CreateAttachedDialog[ide["Notebook"], expr, args];


End[];



