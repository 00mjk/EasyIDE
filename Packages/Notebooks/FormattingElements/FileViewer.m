(* ::Package:: *)

(* Autogenerated Package *)

FileViewerPane::usage="Creates a file viewer pane";
AttachFileViewer::usage="Attaches a FileViewerPane to a Notebook";


NotebookToggleFileViewer::usage="Toggles a file viewer in a Notebook";
ToggleFileViewerButton::usage="A button for the toggle";


IDEToggleFileViewer::usage="Toggles the file viewer in an IDE";


FileEntryContextMenu::usage="ContextMenu for files";


Begin["`Private`"];


(* ::Subsection:: *)
(*FileViewerPane*)



(* ::Subsubsection::Closed:: *)
(*fileViewerFilter*)



fileViewerFilter=
  c__/;(Not@StringStartsQ[c, "."]||StringStartsQ[c, ".git"|".scratch"]);


(* ::Subsubsection::Closed:: *)
(*getToggleListener*)



getToggleListener[s:Verbatim[Dynamic][state_], dir_]:=
        Replace[
          If[!KeyExistsQ[state, dir], state[dir]=<||>];
          Lookup[state[dir], "Listener", Null],
          Null:>
            (state[dir, "Listener"]=Module[{toggleListener}, toggleListener])
          ]


(* ::Subsubsection::Closed:: *)
(*getDirectoryToggle*)



getDirectoryToggle[s:Verbatim[Dynamic][state_], dir_, styl_]:=
  EventHandler[
    Replace[
      styl["Directory"],
      {
        f_Function:>f[dir],
        e_:>Style[FileNameTake[dir], e]
        }
      ],
    {
      "MouseClicked":>
        If[!CurrentValue["ControlKey"],
          With[{old=Lookup[Lookup[state, dir, <||>], "Visible", False]},
            setDeleteState[s, dir, styl][!old, old]
            ]
          ],
      PassEventsDown->True,
      PassEventsUp->True
      }
    ]


(* ::Subsubsection::Closed:: *)
(*getDirColumn*)



getDirColumn[s:Verbatim[Dynamic][state_], dir_, styl_]:=
  If[DirectoryQ[#], 
    fileViewerCell[s, #, styl],
    Replace[
      styl["File"],
      {
        f_Function:>f[#],
        e_:>Style[FileNameTake[#], e]
        }  
      ]
    ]&/@FileNames[state["Filter"], dir]//Column


(* ::Subsubsection::Closed:: *)
(*setDeleteState*)



setDeleteState[s:Verbatim[Dynamic][state_], dir_, styl_][val_, old_]:=
        (
          If[!KeyExistsQ[state, dir], state[dir]=<||>];
          If[val,
            state[dir, "Listing"]=
              getDirColumn[s, dir, styl],
            state[dir, "Listing"]=.
            ];
          state[dir, "Visible"]=val;
          )


(* ::Subsubsection::Closed:: *)
(*fileViewerCell*)



fileViewerCell[s:Verbatim[Dynamic][state_], dir_, styl_]:=
  PaneSelector[
    {
      False->
        Grid[
          {
            {
              Opener[
                Dynamic[
                  Lookup[Lookup[state, dir, <||>], "Visible", False],
                  setDeleteState[s, dir, styl]
                  ]
                ], 
              getDirectoryToggle[s, dir, styl]
              }
            },
          Alignment->Left
          ],
      True->
        Grid[
          {
            {
              Opener[
                Dynamic[
                  Lookup[Lookup[state, dir, <||>], "Visible", False],
                  setDeleteState[s, dir, styl]
                  ]
                ], 
              getDirectoryToggle[s, dir, styl]
              },
            {
              Null, 
              Dynamic[
                state[dir, "Listing"],
                TrackedSymbols:>{state}
                ]
              }
            },
          Alignment->Left
          ]
      },
    Dynamic[
      Lookup[Lookup[state, dir, <||>], "Visible", False],
      setDeleteState[s, dir, styl]
      ],
    BaseStyle->"FileViewerOpener"
    ]


(* ::Subsubsection::Closed:: *)
(*FileViewerPane*)



FileViewerPane//Clear
FileViewerPane[
  st:Verbatim[Dynamic][stt_],
  root_, 
  smap_,
  refreshHandle:Verbatim[Dynamic][_]:Dynamic[None],
  fileFilter:_StringPattern`StringPatternQ:fileViewerFilter
  ]:=
  DynamicModule[
    {
      styles = If[!AssociationQ@smap, <|"Directory"->{}, "File"->smap|>, smap],
      filter = fileFilter
      },
    If[!AssociationQ[stt], stt=<||>];
    If[!KeyExistsQ[styles, "Directory"],
      styles["Directory"]={}
      ];
    If[!KeyExistsQ[styles, "File"],
      styles["File"]={}
      ];
   stt["Filter"]=filter;
    Replace[refreshHandle,
      Verbatim[Dynamic][refresh_]:>
        Dynamic[
          refresh;
          Grid[
            {
              {fileViewerCell[Dynamic[stt], root, styles]},
              {Spacer[{25, 25}]}
            },
          Alignment->Left
          ],
          TrackedSymbols:>{refresh}
          ]
      ]
    ]


(* ::Subsection:: *)
(*Attach*)



(* ::Subsubsection::Closed:: *)
(*ideViewerToggled*)



ideViewerToggled[nb_]:=
  With[
    {
      if = IDEData[nb, {"FileViewer", "Visible"}, False],
      cell = IDEData[nb, PrivateKey["FileViewerCell"]]
      },
    If[if,
      If[NotebookRead[cell]===$Failed,
        IDEData[nb, PrivateKey["FileViewerCell"]] = None;
        IDEData[nb, {"FileViewer", "Visible"}] = False;
        False,
        True
        ],
      False
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*getStateSym*)



getStateSym[nb_]:=
  IDEData[
    nb,
    PrivateKey@"FileViewerState",
    With[{state=Unique["state"<>ToString[RandomInteger[{100, 200}]]<>"$"]},
      SetAttributes[state, Temporary];
      Dynamic[state]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*FileEntryContextMenu*)



FileEntryContextMenu[file_]:=
  With[
    {
      en=ExpandFileName[file],
      f=
        "file://"<>ExternalService`EncodeString[ExpandFileName[file],"/\\"],
      d=
        "file://"<>ExternalService`EncodeString[ExpandFileName@DirectoryName[file],"/\\"]
      },
      {  
        MenuItem["Copy File Name",
          FrontEndExecute[FrontEnd`CopyToClipboard[en]]
          ],    
        MenuItem["Open Externally",
          KernelExecute[FrontEndExecute[FrontEnd`SystemOpen[f]]],
          MenuEvaluator->Automatic
          ],
        MenuItem["Open Parent",
          KernelExecute@FrontEndExecute[FrontEnd`SystemOpen[d]],
          MenuEvaluator->Automatic
          ],
        MenuItem["Rename",
          KernelExecute@PreemptiveQueued[
            $CurrentIDENotebook,
            SaveProjectFileAs[$CurrentIDENotebook, en]
            ],
          MenuEvaluator->Automatic
          ]
        }
      ]


(* ::Subsubsection::Closed:: *)
(*fileStyleFunction*)



fileStyleFunction[nb_]:= 
  Function[
    Grid[List@
      {
        Invisible[Opener[]],
        Style[
          EventHandler[
            Panel[
              MouseAppearance[
                FileNameTake[#], 
                "LinkHand"
                ],
              Appearance->{"Default"->None},
              DefaultBaseStyle->"FileViewerFile",
              ContentPadding->None,
              FrameMargins->0,
              BaseStyle->"FileViewerFile"
              ],
            {
              "MouseClicked":>
                If[!CurrentValue["ControlKey"]&&CurrentValue["MouseClickCount"]==2,
                  IDEOpen[nb, #]
                  ],
              PassEventsUp->True,
              PassEventsDown->True
              }
            ],
        "FileViewerFile",
        ContextMenu->FileEntryContextMenu[#]
        ]
      }
      ]
  ];


(* ::Subsubsection::Closed:: *)
(*dirEntryContextMenu*)



dirEntryContextMenu[nb_, file_]:=
  With[
    {
      en=ExpandFileName[file],
      d=
        "file://"<>ExternalService`EncodeString[ExpandFileName[file],"/\\"]
      },
      {  
        MenuItem["Copy Directory Name",
          FrontEndExecute[FrontEnd`CopyToClipboard[en]]
          ],
        MenuItem["Open Externally",
          KernelExecute[FrontEndExecute[FrontEnd`SystemOpen[d]]],
          MenuEvaluator->Automatic
          ],
        MenuItem["New File",
          KernelExecute@
            PreemptiveQueued[
              nb,
              NewProjectFile[nb, en]
              ],
          MenuEvaluator->Automatic
          ]
        }
      ]


(* ::Subsubsection::Closed:: *)
(*dirStyleFunction*)



dirStyles[nb_]:=
  Style[
    Panel[
      FileNameTake[#],
      Appearance->{"Default"->None},
      DefaultBaseStyle->"FileViewerDirectory",
      ContentPadding->None,
      FrameMargins->0,
      BaseStyle->"FileViewerDirectory"
      ],
    "FileViewerDirectory",
    ContextMenu->dirEntryContextMenu[nb, #]
    ]&;


(* ::Subsubsection::Closed:: *)
(*getFileViewerCell*)



getFileViewerCell[nb_]:=
  Cell[
    BoxData@ToBoxes@
      Pane[
        FileViewerPane[
          getStateSym[nb],
          IDEPath[nb],
          <|
            "Directory"->
              dirStyles[nb], 
            "File"->
              fileStyleFunction[nb]
            |>,
          IDEData[nb, PrivateKey["FileViewerRefreshHook"], Dynamic[fileViewerRefresh]]
          ],
        BaseStyle->"FileViewerPane"
        ],
    "FileViewerCell",
    "DockedCell"
    ]


(* ::Subsubsection::Closed:: *)
(*getFileViewerStylesheet*)



loadFVStyles[]:=
  Append[
    Normal@Merge[
      Get/@
        FileNames[
          "FileViewerStylesMap.wl",
          FileNames["Mappings", $IDESettingsPath]
          ],
      First
      ],
    _->FrontEnd`FileName[{"EasyIDE", "Private"}, "FileViewer.nb"]
    ];


getFileViewerStylesheet[nb_]:=
  GetMainStylesheet[nb]/.loadFVStyles[]


(* ::Subsubsection::Closed:: *)
(*AttachFileViewer*)



AttachFileViewer[nb_]:=
  FEAttachCell[
    nb, 
    getFileViewerCell[nb],
    Automatic,
    {Left, Top},
    {Left, Top},
    {"EvaluatorQuit"}
    ]


(* ::Subsubsection::Closed:: *)
(*NotebookToggleFileViewer*)



NotebookToggleFileViewer[nb_]:=
  Module[{fvStyleSheet},
    If[!ideViewerToggled[nb],
      WithNotebookPaused[
        nb,
        IDEData[nb, {"FileViewer", "Visible"}] = True;
        IDEData[
          nb,
          PrivateKey["FileViewerCell"]
          ] = AttachFileViewer[nb];
        AddNotebookStylesheet[
          nb, 
          getFileViewerStylesheet[nb],
         "FileViewerStyles"
          ]
        ],
      With[{c=IDEData[nb, PrivateKey["FileViewerCell"]]},
        If[NotebookRead[c]=!=$Failed, NotebookDelete[c]]
        ];
      RemoveNotebookStylesheet[
        nb, 
        "FileViewerStyles"
        ];
      IDEData[nb, PrivateKey["FileViewerCell"]] = None;
      IDEData[nb, {"FileViewer", "Visible"}] = False;
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*ToggleFileViewerButton*)



ToggleFileViewerButton//Clear
ToggleFileViewerButton[nb_:Automatic]:=
  Button[
    "\[Congruent]",
    NotebookToggleFileViewer[Replace[nb, Automatic:>EvaluationNotebook[]]],
    BaseStyle->"FileViewerToggleButton",
    Appearance->Inherited
    ]


(* ::Subsection:: *)
(*IDE*)



(* ::Subsubsection::Closed:: *)
(*IDEToggleFileViewer*)



IDEToggleFileViewer[nb_NotebookObject]:=
  NotebookToggleFileViewer[nb];
IDEToggleFileViewer[ide_IDENotebookObject]:=
  IDEToggleFileViewer[ide["Notebook"]];


End[];



