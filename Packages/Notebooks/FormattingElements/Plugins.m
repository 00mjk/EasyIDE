(* ::Package:: *)

(* Autogenerated Package *)

LoadPlugin::usage="";
GetPluginData::usage="";
GetPluginsMenus::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Plugins*)



(* ::Subsubsection::Closed:: *)
(*LoadPlugin*)



Quiet[
  System`MenuKey;
  System`MenuItem;
  ]


(* ::Text:: *)
(*
	MenuCommands get loaded into the main menu bar, 
	ActionMenus get stuck into the DockedCell, 
	and some day MenuItem expressions will get dumped into the main menu(?).
*)



LoadPlugin//Clear
LoadPlugin[file_String?FileExistsQ, default_:Automatic]:=
  Module[
    {
      pluginData
      },
    PackageExecute[
      Internal`WithLocalSettings[
        BeginPackage["`Plugins`"];
        $ContextPath = 
          Join[
            {"System`"},
            $PackageContexts, 
            Append[$ContextPath, $Context]
            ];,
        pluginData = Get[file],
        EndPackage[]
        ]
      ];
    pluginData=
      Replace[pluginData, 
        {
          a_Association?(KeyExistsQ[#, "Name"]&&(
            KeyExistsQ[#, "Commands"]||
            KeyExistsQ[#, "Menu"]||
            KeyExistsQ[#, "Toolbar"]
            )&):>
            a,
          pd_?(StringQ[default]&):>
            <|
              "Name"->FileBaseName[file],
              default->pd
              |>,
          pd:{(_Rule|_RuleDelayed)..}|_Association:>
            <|
              "Name"->FileBaseName[file],
              "Commands"->pd
              |>,
          pd:{(Delimiter|_RuleDelayed)..}:>
            <|
              "Name"->FileBaseName[file],
              "Menu"->pluginData
              |>,
          _List:>
            <|
              "Name"->FileBaseName[file],
              "Toolbar"->pluginData
              |>,
          m_:>
            <|
              "Name"->FileBaseName[file],
              "Menu"->m
              |>
          }
        ];
    If[!KeyExistsQ[pluginData, "Type"],
      pluginData["Type"]=
        Which[
          KeyExistsQ[pluginData, "Commands"],
            "Commands",
          KeyExistsQ[pluginData, "Toolbar"],
            "Toolbar",
          True,
            "Menu"
          ]
      ];
    If[pluginData["Type"]==="Commands",
      pluginData["Commands"]=
        pluginData["Name"]->pluginData["Commands"]
      ];
    normalizePlugin@pluginData
    ];
LoadPlugin[name_String, default_:Automatic]:=
  Module[{pgfs},
    pgfs=
      FileNames[name~~(".wl"|".m"), 
          FileNames[
            Switch[default,
              Automatic,
                "Plugins"|"Toolbars",
              "Menu",
                "Plugins",
              "Toolbar",
                "Toolbars"
              ],
            $IDESettingsPath
            ]
          ];
     If[Length@pgfs>0,
       LoadPlugin[First@pgfs, default],
       None
       ]
     ]


(* ::Subsubsection::Closed:: *)
(*getPluginActionMenu*)



getPluginActionMenu[plugin_]:=
  ActionMenu[
    MouseAppearance[
      Button[
        plugin["Name"],
        "",
        BaseStyle->"PluginMenu",
        Appearance->Inherited
        ],
      "LinkHand"
      ],
    Replace[
      plugin["Menu"],
      {
        (l_:>c_):>
          (l:>(PreemptiveQueued[$CurrentIDENotebook, c]))
        },
      1
      ],
    BaseStyle->"PluginMenu",
    MenuAppearance->"PluginMenuList",
    Sequence@@Flatten@{Lookup[plugin, "Options", {}]}
    ];


(* ::Subsubsection::Closed:: *)
(*getPluginToolbar*)



getPluginToolbar[plugin_]:=
  Replace[
     plugin["Toolbar"],
     {
       (key_:>{command_, ops___}):>
            MouseAppearance[
              Button[
              key, 
                command,
                Sequence@@FilterRules[
                  {Appearance->Inherited, ops}, 
                  Join[Options[Button], Options[ButtonBox]]
                  ]
                ],
            "LinkHand"
            ],
          (key_:>command_):>
             MouseAppearance[Button[key, command, Appearance->Inherited], "LinkHand"]
           },
        1
        ]


(* ::Subsubsection::Closed:: *)
(*normalizePlugin*)



normalizePlugin[a_Association]:=
  Module[{plugin=a},
    Which[
      plugin["Type"]=="Menu",
        If[ListQ@plugin["Menu"],
          plugin["Menu"]=
            getPluginActionMenu[plugin]
          ],
      plugin["Type"]=="Toolbar",
        If[ListQ@plugin["Toolbar"],
          plugin["Toolbar"]=
            getPluginToolbar[plugin]
          ]
      ];
    plugin
    ]


(* ::Subsubsection::Closed:: *)
(*GetPluginData*)



GetPluginData[]:=
  Module[
    {baseData},
    baseData=
      Map[
        LoadPlugin,
        FileNames[__~~(".wl"|".m"), 
          FileNames["Plugins", $IDESettingsPath]
          ]
        ];
    baseData =
      GroupBy[baseData, #Type&];
    If[!KeyExistsQ[baseData, "Menu"], baseData["Menu"]={}];
    If[!KeyExistsQ[baseData, "Commands"], baseData["Commands"]={}];
    baseData
    ]


(* ::Subsubsection::Closed:: *)
(*createPluginCommandsMenu*)



createPluginCommandsMenu[s_, data_]:=
  (
    If[!AssociationQ[s], s=<||>];
    If[KeyExistsQ[s, "RootCell"],
      DestroyDropDownMenu[Dynamic[s]],
      AttachDropDownMenu[
        Dynamic[s], 
        EvaluationBox[], 
        Lookup[data["Commands"], "Commands", {}]
        ]
      ]
    );
createPluginCommandsMenu~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*GetPluginsMenus*)



GetPluginsMenus//Clear
GetPluginsMenus[nb_]:=
  With[{data=GetPluginData[]},
    Module[{pluginMenuState, state},
      state=IDEData[nb, PrivateKey["MenuState"], Hold[pluginMenuState]];
      <|
        "DropDown"->
          Replace[state,
            Hold[s_]:>
              MouseAppearance[
                Button[
                  "Plugins",
                  createPluginCommandsMenu[s, data],
                  BaseStyle->"PluginMenu",
                  Appearance->Inherited,
                  ImageSize->{Automatic, Automatic}
                  ],
               "LinkHand"
               ]
            ],
        "Menus"->Lookup[data["Menu"], "Menu"]
        |>
      ]
    ]


End[];



