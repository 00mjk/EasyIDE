(* ::Package:: *)

(* Autogenerated Package *)

OpenIDEFile::usage="";


CreateIDENotebook::usage="";
AttachFileViewer::usage="Creates the IDE notebook AttachedCell";
LoadIDEPlugin::usage="";
CreateIDEDockedCell::usage="";
CreatePluginMenu::usage="Sets the ContextMenu for the plugins";
CreateFileTab::usage="";
SwitchFileTabs::usage="";
SaveIDEFile::usage="";
LoadIDESettings::usage="";
SaveIDESettings::usage="";
SetIDEStylesheet::usage="";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*pauseDo*)



(* ::Text:: *)
(*
	Helper function to suspend the screen while updating the nb
*)



pauseDo[nb_NotebookObject, expr_]:=
  Internal`WithLocalSettings[
    FrontEndExecute@
      FrontEnd`NotebookSuspendScreenUpdates[nb],
    expr,
    FrontEndExecute@
      FrontEnd`NotebookResumeScreenUpdates[nb]
    ];
pauseDo~SetAttributes~HoldRest


(* ::Subsubsection::Closed:: *)
(*ideNotebookPut*)



(* ::Text:: *)
(*
	Put a new notebook in the pane
*)



ideNotebookPut[nbObj_NotebookObject, nb_Notebook]:=
  pauseDo[
    nbObj,
    Module[
      {
        c=Cells[nbObj],
        baseExpr,
        opts = Rest[nb]
        },
      NotebookDelete[c];
      CurrentValue[nbObj, {TaggingRules, $PackageName, "Options"}]= opts;
      baseExpr = NotebookGet[nbObj];
      NotebookPut[
        ReplacePart[baseExpr, 1 -> nb[[1]]],
        nbObj
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookPutFile*)



ideNotebookPutFile[nb_Notebookobject, f_String]:=
  Module[
    {
      nbObj,
      nbExpr
      },
    Switch[FileExtension[f],
      "m"|"wl",
        nbObj = NotebookOpen[f, Visible->False];
        nbExpr = NotebookGet[nbObj];
        NotebookClose[nbObj];,
      "nb",
        nbExpr = Get[f]
        ]
    ];


(* ::Subsubsection::Closed:: *)
(*ideNotebookCreateTab*)



(* ::Subsubsubsection::Closed:: *)
(*createTabObject*)



createTabObject[tabName_String]:=
  Panel[
    Row@{
        Spacer[15],
        MouseAppearance[
          EventHandler[tabName, "MouseClicked":>switchTabs[tabName]],
          "LinkHand"
          ],
        Spacer[5],
         Button["", closeTab[tabName], 
          Appearance->
            {
              "Default"->None,
              "Hover"->
                Image[
                  ToExpression@FrontEndResource["FEBitmaps", "CircleXIconHighlight"], 
                  Interleaving->True
                  ],
              "Pressed"->
                Image[
                  ToExpression@FrontEndResource["FEBitmaps", "CircleXIconPressed"], 
                  Interleaving->True
                  ]
              },
          ImageSize->{10, 10}
          ]
        },
    ImageSize->{Automatic, 25},
    Appearance->
      Import[PackageFilePath["Resources", "Tab.9.png"]],
    BoxID->tabName<>"-tab"
    ]


(* ::Subsubsubsection::Closed:: *)
(*ideNotebookCreateTab*)



ideNotebookCreateTab[nb_NotebookObject, tabName_String, tabData_]:=
  Module[
    {
      dockedCell=CurrentValue[nb, DockedCells],
      tabObj = createTabObject[tabName]
      },
    CurrentValue[nb, {TaggingRules, $PackageName, "Tabs", tabName}]=tabData;
    dockedCell = Insert[dockedCell, ToBoxes[tabObj], {2, 1, -1}];
    CurrentValue[nb, DockedCells] = dockedCell;
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookSwitchTab*)



ideNotebookSwitchTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      file
      },
    If[saveCurrent, ideNotebookSave[nb]];
    file = CurrentValue[nb, {TaggingRules, $PackageName, "Tabs", tabName, "File"}];
    ideNotebookPutFile[nb, file];
    CurrentValue[nb, {TaggingRules, $PackageName, "Active"}] = tabName;
    ]


(* ::Subsubsection::Closed:: *)
(*OpenIDEFile*)



OpenIDEFile[nb_NotebookObject, f_String]:=
  Module[
    {
      nbObj,
      nbExpr,
      tabName
      },
    ;
    tabName = FileBaseName[f];
    
    ]


End[];



