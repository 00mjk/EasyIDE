(* ::Package:: *)

(* Autogenerated Package *)

(* ::Text:: *)
(*IDE Notebook constructor*)



CreateIDENotebook::usage="";


(* ::Text:: *)
(*The functions provided to an IDENotebookObject as methods*)



IDEOpen::usage="";
IDESave::usage="";
IDEClose::usage="";


(* ::Text:: *)
(*Stuff for finding plugins*)



$PluginsPath::usage="The path to look for plugins on";


(* ::Text:: *)
(*The menu used in the notebooks*)



$IDENotebookMenu::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Helpers*)



(* ::Subsubsection::Closed:: *)
(*pauseDo*)



(* ::Text:: *)
(*
	Helper function to suspend the screen while updating the nb
*)



pauseDo[nb_NotebookObject, expr_]:=
  Block[{paused = If[TrueQ@paused, True, False]},
    If[paused,
      expr,
      Internal`WithLocalSettings[
        FrontEndExecute@
          FrontEnd`NotebookSuspendScreenUpdates[nb];,
        paused = True;
        expr,
        FrontEndExecute@
          FrontEnd`NotebookResumeScreenUpdates[nb];
        ]
      ]
    ];
pauseDo~SetAttributes~HoldRest


(* ::Subsubsection::Closed:: *)
(*premptiveQueuedEval*)



premptiveQueuedEval[nb_, expr_]:=
  MessageDialog[
    DynamicModule[
      {},
      Null,
      Initialization:>{
        Internal`WithLocalSettings[
          Null,
          Block[
            {
              EvaluationNotebook=nb&,
              FrontEnd`EvaluationNotebook=nb&
              },
            expr
            ],
          NotebookClose[EvaluationNotebook[]]
          ]
        },
      SynchronousInitialization -> False
      ],
    Visible->False,
    Evaluator->CurrentValue[nb, Evaluator]
    ];
premptiveQueuedEval~SetAttributes~HoldRest


(* ::Subsection:: *)
(*IDE Data*)



(* ::Subsubsection::Closed:: *)
(*ideNbData*)



ideNbData[nb_, {opts___}, default_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}, default];
ideNbData[nb_, {opts___}]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}];
ideNbData[nb_, opt_String, default_]:=
  ideNbData[nb, {opt}, default];
ideNbData[nb_, opt_String]:=
  ideNbData[nb, {opt}];
ideNbData[nb_]:=
  ideNbData[nb, {}];


(* ::Subsubsection::Closed:: *)
(*ideSetNbData*)



ideSetNbData[nb_, {opts___}, value_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}] = value;
ideSetNbData[nb_, opts_, value_]:=
  ideSetNbData[nb, {opts}, value];
ideSetNbDataDelayed[nb_, opts_, value_]:=
  CurrentValue[nb, 
    Flatten[{TaggingRules, $PackageName, opts}, 1]
    ] := value;
ideSetNbDataDelayed~SetAttributes~HoldRest;


(* ::Subsubsection::Closed:: *)
(*ideActiveTab*)



ideActiveTab[nb_]:=
  ideNbData[nb, "ActiveTab", None];


(* ::Subsubsection::Closed:: *)
(*ideTabNames*)



ideTabNames[nb_]:=
  Keys@ideNbData[nb, "Tabs", {}];


(* ::Subsubsection::Closed:: *)
(*ideTabExists*)



ideTabExists[nb_, tab_]:=
  ListQ@ideNbData[nb, {"Tabs", tab}];


(* ::Subsubsection::Closed:: *)
(*ideProjectDir*)



ideProjectDir[nb_]:=
  ideNbData[nb, {"Project", "Directory"}];


(* ::Subsubsection::Closed:: *)
(*ideActiveFile*)



ideActiveFile[nb_]:=
  With[{t=ideActiveTab[nb]},
    If[t=!=None,
      ideNbData[nb, {"Tabs", t, "File"}, None],
      t
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideAbsPath*)



ideAbsPath[nb_NotebookObject, file_]:=
  Module[
    {
      absFile = file,
      dir
      },
    If[ExpandFileName[absFile] =!= absFile,
      dir = ideProjectDir[nb];
      If[FileExistsQ@FileNameJoin@{dir, absFile},
        absFile = FileNameJoin@{dir, absFile},
        absFile = ExpandFileName[absFile]
        ]
      ];
    absFile
    ]


(* ::Subsubsection::Closed:: *)
(*ideViewerToggled*)



ideViewerToggled[nb_]:=
  With[{if=ideNbData[nb, {"FileViewer", "Visible"}, False]},
    If[if,
      If[Length@Options[ideNbData[nb, {"FileViewer", "Cell"}]]==0,
        ideSetNbData[nb, {"FileViewer", "Cell"}, None];
        ideSetNbData[nb, {"FileViewer", "Visible"}, False];
        False,
        True
        ],
      False
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookExpr*)



ideNotebookExpr[nb_]:=
  Module[
    {
      opts = ideNbData[nb, "Options", {}]
      },
    Notebook[
      NotebookGet[nb][[1]],
      Flatten[List@@opts]
      ]
    ]


(* ::Subsection:: *)
(*Notebook Manipulation*)



(* ::Subsubsection::Closed:: *)
(*ideNotebookPut*)



(* ::Text:: *)
(*
	Put a new notebook in the pane
*)



ideNotebookPut[nbObj_NotebookObject, nb_Notebook]:=
  pauseDo[
    nbObj,
    Module[
      {
        baseExpr,
        opts = Rest[nb]
        },
      ideSetNbData[nbObj, "Options", opts];
      NotebookPut[
        Notebook[nb[[1]], Options[nbObj]],
        nbObj
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookPutFile*)



ideNotebookPutFile[nb_NotebookObject, f_String]:=
  Module[
    {
      nbObj,
      nbExpr
      },
    Switch[FileExtension[f],
      "nb",
        nbExpr = Get[f],
      _,
        nbObj = NotebookOpen[f, Visible->False];
        nbExpr = NotebookGet[nbObj];
        NotebookClose[nbObj];
      ];
    ideNotebookPut[nb, nbExpr]
    ];


(* ::Subsubsection::Closed:: *)
(*ideNotebookSave*)



ideNotebookSave[nb_NotebookObject, file_:Automatic]:=
  Module[
    {
      f = file,
      dir,
      nbExpr,
      nbObj
      },
    If[f === Automatic,
      f = ideActiveFile[nb]
      ];
    If[f=!=None,
      f = ideAbsPath[nb, f];
      Switch[FileExtension[f],
        "nb",
          nbExpr = ideNotebookExpr[nb];
          Export[f, nbExpr] (* should I just Put this? *),
        "m"|"wl",
          nbExpr =ideNotebookExpr[nb];
          Internal`WithLocalSettings[
            nbObj = CreateDocument[nbExpr, Visible->False],
            FrontEndExecute@
              FrontEndToken[
                nbObj,
                "Save",
                {f, "Package"}
                ],
            NotebookClose[nbObj]
            ],
        _,
          nbExpr = ideNotebookExpr[nb];
          Internal`WithLocalSettings[
            nbObj = CreateDocument[nbExpr, Visible->False],
            FrontEndExecute@
              FrontEndToken[
                nbObj,
                "Save",
                {f, "Text"}
                ],
            NotebookClose[nbObj]
            ]
        ]
      ]
    ]


(* ::Subsection:: *)
(*FileViewer*)



(* ::Subsubsection::Closed:: *)
(*fileViewer*)



fileViewer[
  root_, 
  smap_:<|
    "Directory"->{FontFamily->"Helvetica", FontColor->Hue[.666, .5, .5]}, 
    "File"->{FontFamily->"Helvetica"}
    |>,
  refreshHandle:Verbatim[Dynamic][_]:Dynamic[None]
  ]:=
  DynamicModule[
    {
      state = <||>,
      styles = If[!AssociationQ@smap, <|"Directory"->{}, "File"->smap|>, smap],
      fileViewerCell
      },
    If[!KeyExistsQ[styles, "Directory"],
      styles["Directory"]={}
      ];
    If[!KeyExistsQ[styles, "File"],
      styles["File"]={}
      ];
    Replace[refreshHandle,
      Verbatim[Dynamic][refresh_]:>
        Dynamic[
          refresh;
          fileViewerCell[Dynamic[state], root, styles],
          TrackedSymbols:>{refresh}
          ]
      ],
    Initialization:>{
        fileViewerCell[s:Verbatim[Dynamic][state_], dir_, styl_]:=
          MouseAppearance[
            OpenerView[
              {
                Replace[
                  styl["Directory"],
                  {
                    f_Function:>f[dir],
                    e_:>Style[FileNameTake[dir], e]
                    }
                  ],
                If[DirectoryQ[#], 
                  fileViewerCell[s, #, styl],
                  Replace[
                    styl["File"],
                    {
                      f_Function:>f[#],
                      e_:>Style[FileNameTake[#], e]
                      }
                    ]
                  ]&/@FileNames["*", dir]//Column//Dynamic
                },
              Dynamic[
                Lookup[state, dir, False],
                (state[dir]=#)&
                ]
              ],
            "Arrow"
            ]
        }
    ]


(* ::Subsubsection::Closed:: *)
(*getFileViewerCell*)



Quiet[

getFileViewerCell[nb_]:=
  Cell[
    BoxData@ToBoxes@
      Pane[
        fileViewer[
          ideProjectDir[nb],
          <|
            "Directory"->{FontFamily->"Helvetica", FontColor->Hue[.666, .5, .5]}, 
            "File"->(
                EventHandler[
                  Style[FileNameTake[#], FontFamily->"Helvetica"], 
                  {"MouseClicked":>If[CurrentValue["MouseClickCount"]==2, IDEOpen[nb, #]]}
                  ]&
                )
            |>,
          ideNbData[nb, {"FileViewer", "RefreshHook"}, Dynamic[fileViewerRefresh]]
          ],
        {
          200, 
          FEPrivate`Part[
            FrontEnd`AbsoluteCurrentValue[nb, WindowSize],
            2
            ]-30
          },
        Alignment->{Left, Top},
        Scrollbars->{False, Automatic},
        AppearanceElements->None
        ],
    "FileBrowserCell",
    Background->GrayLevel[.98],
    CellFrame->{{0, 1}, {0, 0}},
    CellMargins->{{0, 0}, {0, -2}},
    System`CellFrameStyle->GrayLevel[.8]
    ],
    
General::shdw
]


(* ::Subsubsection::Closed:: *)
(*ideNotebookToggleFileBrowser*)



ideNotebookToggleFileBrowser[nb_]:=
  If[!ideViewerToggled[nb],
    ideSetNbData[nb, {"FileViewer", "Visible"}, True];
    ideSetNbData[
      nb,
      {"FileViewer", "Cell"},
      FEAttachCell[
        nb, 
        getFileViewerCell[nb],
        Automatic,
        {Left, Top},
        {Left, Top},
        {"EvaluatorQuit"}
        ]
      ],
    NotebookDelete@ideNbData[nb, {"FileViewer", "Cell"}];
    ideSetNbData[nb, {"FileViewer", "Visible"}, False]
    ];


(* ::Subsubsection::Closed:: *)
(*toggleFileViewerButton*)



toggleFileViewerButton[]:=
  Button["\[Congruent]",
    ideNotebookToggleFileBrowser[EvaluationNotebook[]],
    Appearance->
      {
        "Default"->
          With[{p={$PackageName}},
            FrontEnd`FileName[
              p,
              "FileViewerDown.png"
              ]
            ],
        "Pressed"->
          With[{p={$PackageName}},
            FrontEnd`FileName[
              p,
              "FileViewerUp.png"
              ]
            ],
        With[
          {
            c=
              Block[
                {CurrentValue=FrontEnd`CurrentValue}, 
                ideViewerToggled[FrontEnd`EvaluationNotebook[]]
                ]
            },
          FEPrivate`If[FEPrivate`SameQ[c, True], "Pressed", Automatic]
          ]
        },
    ImageSize->{25, 25},
    FrameMargins->{{-5, -5}, {-3, -5}}
    ]


(* ::Subsection:: *)
(*Plugins*)



(* ::Subsubsection::Closed:: *)
(*$PluginsPath*)



$PluginsPath = 
  {
    FileNameJoin@{$UserBaseDirectory, "ApplicationData", "EasyIDE", "Plugins"},
    PackageFilePath["Resources", "Plugins"]
    } 


(* ::Subsubsection::Closed:: *)
(*loadPlugin*)



Quiet[
  System`MenuKey;
  System`MenuItem;
  ]


(* ::Text:: *)
(*
	MenuCommands get loaded into the main menu bar, ActionMenus get stuck into the DockedCell, and 
	some day MenuItem expressions will get dumped into the main menu.
*)



loadPlugin[file_String]:=
  Module[
    {
      pluginData
      },
    PackageExecute[
      Internal`WithLocalSettings[
        Begin["`Plugins`"],
        pluginData = Get[file],
        End[]
        ]
      ];
    If[!AssociationQ@pluginData,
      If[ListQ[pluginData],
        pluginData = 
          <|
            "Name"->FileBaseName[file],
            "Commands"->pluginData
            |>,
        pluginData = 
          <|
            "Name"->FileBaseName[file],
            "Menu"->pluginData
            |>
        ]
      ];
    If[!KeyExistsQ[pluginData, "Type"],
      pluginData["Type"]=
        If[KeyExistsQ[pluginData, "Commands"], "Commands", "Menu"]
      ];
    If[pluginData["Type"]==="Commands",
      pluginData["Commands"]=
        pluginData["Name"]->pluginData["Commands"]
      ];
    normalizePlugin@pluginData
    ]


(* ::Subsubsection::Closed:: *)
(*normalizePlugin*)



normalizePlugin[a_Association]:=
  Module[{plugin=a},
    Which[plugin["Type"]=="Menu",
      If[ListQ@plugin["Menu"],
        plugin["Menu"]=
          ActionMenu[
            Button[Style[plugin["Name"], Hue[0, .1, 1]], "", 
              FrameMargins->{{5, 0}, {0, 0}},
              Appearance->{"Default"->FrontEnd`FileName[{"EasyIDE"}, "DropDown.9.png"]}
              ],
            Replace[
              plugin["Menu"],
              {
                (l_:>c_):>
                  (l:>(premptiveQueuedEval[EvaluationNotebook[], c]))
                },
              1
              ],
            Appearance->None
            ]
        ]
      ];
    plugin
    ]


(* ::Subsubsection::Closed:: *)
(*getPluginData*)



getPluginData[]:=
  Module[
    {baseData},
    baseData=
      Map[
        loadPlugin,
        FileNames[__~~(".wl"|".m"), $PluginsPath]
        ];
    baseData =
      GroupBy[baseData, #Type&];
    If[!KeyExistsQ[baseData, "Menu"], baseData["Menu"]={}];
    If[!KeyExistsQ[baseData, "Commands"], baseData["Commands"]={}];
    baseData
    ]


(* ::Subsubsection::Closed:: *)
(*Make Menu*)



(* ::Subsubsubsection::Closed:: *)
(*makeMenuExpr*)



makeMenuExpr[s:Verbatim[Dynamic][state_], menuList_]:=
  Pane[
    Panel[
      Column[
        makeMenuCommand[s, #]&/@menuList
        ],
      FilterRules[
        {
          BaseStyle->"Text",
          ImageSize->{150, Automatic},
          FrameMargins->{{-1, -3}, {-2, -1}},
          Appearance->
            {
              "Default"->
                FrontEnd`FileName[{"EasyIDE"}, "MenuItem.9.png"]
              }
          },
        Options[Panel]
        ]
      ],
    {150, Automatic},
    ImageSizeAction->"Clip"
    ];


(* ::Subsubsubsection::Closed:: *)
(*makeMenuCommand*)



makeMenuCommand//Clear


makeMenuCommand[s:Verbatim[Dynamic][state_], label_->list_List]:=
    Button[
      Grid[{{
        Pane[label, {90, Automatic}, Alignment->{Left, Top}], 
        Pane["\[RightPointer]", {10, Automatic}, Alignment->{Left, Top}]}}],
      attachMenuExpr[s, EvaluationBox[], makeMenuExpr[s, list]],
      AutoAction->True,
      Appearance->{
        "Hover"->FrontEnd`FileName[{"EasyIDE"}, "MenuItem-Hover.9.png"],
        "Pressed" -> FrontEnd`FileName[{"EasyIDE"}, "MenuItem-Hover.9.png"]
        },
      FrameMargins->{{20, 20}, {15, 15}},
      ImageSize->{150, Automatic},
      BaseStyle->"Text",
      Alignment->{Left, Top}
      ]


makeMenuCommand[s:Verbatim[Dynamic][state_], label_:>command_]:=
  EventHandler[
    Button[
      label,
      Internal`WithLocalSettings[
        Null,
        premptiveQueuedEval[EvaluationNotebook[], command],
        destroyMenu[s]
        ],
      ButtonData:>s,
      Appearance->
        {
          "Default"->None,
          "Hover"->FrontEnd`FileName[{"EasyIDE"}, "MenuItem-Hover.9.png"]
          },
      FrameMargins->{{20, 20}, {15, 15}},
      ImageSize->Scaled[1],
      Alignment->Left
      ],
  {
    "MouseEntered":> pruneMenu[s, EvaluationCell[], False],
    PassEventsDown->True
    }
  ];


makeMenuCommand[s:Verbatim[Dynamic][state_], Delimiter]:=
  Framed["", 
    FrameStyle->GrayLevel[.8],
    ImageSize->{Scaled[1], 0},
    FrameMargins->{{0, 0}, {-1, 0}}
    ]


(* ::Subsubsubsection::Closed:: *)
(*pruneMenu*)



pruneMenu[s:Verbatim[Dynamic][state_], root_, pruneHead:True|False:True]:=
  Module[
    {
      kid
      },
    kid = state[root]["Submenu"];
    pauseDo[
      ParentNotebook@root,
      If[Head[kid]===CellObject,
        pruneMenu[s, kid]
        ];
      If[pruneHead, 
        NotebookDelete[root];
        If[KeyExistsQ[state, root],
          state[root]=.
          ],
        If[KeyExistsQ[state, root],
          state[root, "Submenu"]=.;
          state[root, "MenuBox"]=.;
          ]
        ]
      ];
    ]


(* ::Subsubsubsection::Closed:: *)
(*destroyMenu*)



destroyMenu[s:Verbatim[Dynamic][state_]]:=
  (
    pruneMenu[s, state["RootCell"], True];
    state["RootCell"]=.;
    state["Root"]=.;
    )


(* ::Subsubsubsection::Closed:: *)
(*attachMenuExpr*)



attachMenuExpr[s:Verbatim[Dynamic][state_], parentBox_, menuExpr_]:=
  Module[
    {
      parentCell,
      cell,
      currentKids
      },
    parentCell = ParentCell@parentBox;
    If[!KeyExistsQ[state, parentCell], 
      state[parentCell] = <||>
      ];
    If[state[parentCell, "MenuBox"] =!= parentBox || 
        (
          Head[state[parentCell, "Submenu"]]===CellObject&&
            NotebookRead[state[parentCell, "Submenu"]] === $Failed
          ),
      pruneMenu[s, parentCell, False];
      cell=
        FEAttachCell[
          parentBox,
          menuExpr,
          Automatic,
          {Left, Top},
          {Right, Top},
          {"EvaluatorQuit"}
          ];
      state[parentCell, "MenuBox"] = parentBox;
      state[parentCell, "Submenu"] = cell
      ];
    ];


(* ::Subsubsubsection::Closed:: *)
(*makeMenu*)



makeMenu//Clear
makeMenu[
  stateTracker:(Verbatim[Dynamic][_](*|None*)),
  parentBox:_BoxObject|Automatic:Automatic, 
  menuCommands_
  ]:=
  With[
    {
      box=Replace[parentBox, Automatic:>EvaluationBox[]],
      state=
        Replace[stateTracker, 
          None:>Module[{menuState}, Dynamic[menuState]]
          ]
      },
    Replace[state,
      s:Verbatim[Dynamic][menuState_]:>
        Replace[
          FEAttachCell[
            box,
            If[!AssociationQ[menuState], menuState=<||>];
            menuState["Root"] = box;
            makeMenuExpr[s, Append[menuCommands, Style["Cancel", Italic]:>None]],
            Automatic,
            {Right, Bottom},
            {Right, Top},
            {(*"OutsideMouseClick", *)"ParentChanged", "EvaluatorQuit"}
            ],
          c_CellObject:>(menuState["RootCell"] = c)
          ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookLoadPluginsMenu*)



ideNotebookLoadPluginsMenu[]:=
  With[{data=getPluginData[]},
    Module[{pluginMenuState},
      {
        Button[
          Style["Plugins", Hue[0, .1, 1]],
          If[!AssociationQ[pluginMenuState],
            pluginMenuState=<||>
            ];
          If[Length[pluginMenuState]>0,
            destroyMenu[Dynamic[pluginMenuState]],
            makeMenu[Dynamic[pluginMenuState], EvaluationBox[], 
              Lookup[data["Commands"], "Commands"]
              ]
            ],
          Appearance->{
            "Default"->
              FrontEnd`FileName[{"EasyIDE"}, "DropDown.9.png"]
            },
          ImageSize->{Automatic, Automatic},
          FrameMargins->{{5, 0}, {0, 0}},
          BaselinePosition->Top
          ],
        Lookup[data["Menu"], "Menu"]
        }
      ]
    ]


(* ::Subsection:: *)
(*Tabbing*)



(* ::Subsubsection::Closed:: *)
(*createDynamicTabRow*)



createDynamicTabRow[]:=
  With[
    {
      tns=
        Quiet@Block[
          {CurrentValue=cv}, 
          ideTabNames[FrontEnd`EvaluationNotebook[]]
          ]
      },
    Dynamic[
      tabRowRefresh;
      Pane[Row@Map[createTabObject, tns], {Automatic, 35}, Alignment->Bottom],
      TrackedSymbols:>{tabRowRefresh}
      ]/.cv->CurrentValue
    ]


(* ::Subsubsection::Closed:: *)
(*ideSetTab*)



ideSetTab[nb_, tabName_]:=
  ideSetNbData[nb, "ActiveTab", tabName]


(* ::Subsubsection::Closed:: *)
(*createTabObject*)



createTabObject[tabName_String]:=
  Panel[
    Row@{
        Spacer[15],
        MouseAppearance[
          EventHandler[tabName, 
            "MouseClicked":>
              ideNotebookSwitchTab[EvaluationNotebook[], tabName]],
          "LinkHand"
          ],
        Spacer[3],
        Button["", 
         ideNotebookCloseTab[EvaluationNotebook[], tabName], 
          Appearance->
            {
              "Default"->None,
              "Hover"->
                FrontEnd`FileName[{"Typeset", "Message"}, "close.png"],
              "Pressed"->
                FrontEnd`FileName[{"Typeset", "Message"}, "close-hover.png"]
              },
          ImageSize->{12, 12}
          ]
        },
    ImageSize->{Automatic, 25},
    Appearance->
      {
        "Default"->With[
          {
            c=
              Block[
                {CurrentValue=FrontEnd`CurrentValue}, 
                ideNbData[FrontEnd`EvaluationNotebook[], "ActiveTab"]
                ]
            },
          FEPrivate`If[FEPrivate`SameQ[c, tabName], 
            FrontEnd`FileName[{"EasyIDE"}, "Tab.9.png"], 
            FrontEnd`FileName[{"EasyIDE"}, "TabBackground.9.png"]
            ]
          ]
        },
    BoxID->tabName<>"-tab",
    BaselinePosition->Top
    ]


(* ::Subsubsection::Closed:: *)
(*tabObjectPattern*)



tabObjectPattern[tabName_]:=
  Panel[___, BoxID->tabName, ___]


(* ::Subsubsection::Closed:: *)
(*insertTab*)



insertTab[dockedCell_, tabName_]:=
  dockedCell/.
    TemplateBox[tabs_, k:"TabbingRow", r___]:>
      TemplateBox[
        Append[tabs, ToBoxes[createTabObject[tabName]]],
        k,
        r
        ]


(* ::Subsubsection::Closed:: *)
(*deleteTab*)



deleteTab[dockedCell_, tabName_]:=
  DeleteCases[dockedCell, tabObjectPattern[tabName], Infinity]


(* ::Subsubsection::Closed:: *)
(*refreshTabs*)



refreshTabs[]:=
  tabRowRefresh=RandomReal[];


(* ::Subsubsection::Closed:: *)
(*ideNotebookCreateTab*)



ideNotebookCreateTab[nb_NotebookObject, tabName_String, tabData_]:=
  (
    ideSetNbData[nb, {"Tabs", tabName}, tabData];
    refreshTabs[]
    )


(* ::Subsubsection::Closed:: *)
(*ideNotebookSwitchTab*)



ideNotebookSwitchTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      file,
      active = ideActiveTab[nb]
      },
    If[active =!= tabName,
      If[saveCurrent, ideNotebookSave[nb]];
      file = ideNbData[nb, {"Tabs", tabName, "File"}];
      ideNotebookPutFile[nb, file];
      ideSetTab[nb, tabName];
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookCloseTab*)



ideNotebookCloseTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      active = ideActiveTab[nb],
      tabs = ideNbData[nb, "Tabs"]
      },
    If[MemberQ[Keys@tabs, tabName],
      pauseDo[
        nb,
        tabs = DeleteCases[tabs, tabName->_];
        If[tabName == active,
          If[Length@tabs > 0,
            ideNotebookSwitchTab[nb, Keys[tabs][[1]]],
            If[saveCurrent, ideNotebookSave[nb]];
            ideNotebookPut[nb, Notebook[{}]];
            ideSetNbData[nb, "ActiveTab", None];
            ]
          ];
        ideSetNbData[nb, "Tabs", tabs];
        refreshTabs[]
        ]
      ]
    ]


(* ::Subsection:: *)
(*File Operations*)



(* ::Subsubsection::Closed:: *)
(*getFileTabName*)



getFileTabName[nb_, f_]:=
  FileBaseName[f]


(* ::Subsubsection::Closed:: *)
(*IDEOpen*)



IDEOpen[nb_NotebookObject, f_String?FileExistsQ]:=
  Module[
    {
      nbObj,
      nbExpr,
      tabName
      },
    tabName = getFileTabName[nb, f];
    If[!TrueQ@ideTabExists[nb, tabName],
      ideNotebookCreateTab[nb, tabName, 
        {
          "File"->f  
          }
        ]
      ];
    ideNotebookSwitchTab[nb, tabName]
    ];
IDEOpen[nb_IDENotebookObject, f_String?FileExistsQ]:=
  IDEOpen[nb["Notebook"], f];


(* ::Subsubsection::Closed:: *)
(*IDESave*)



IDESave[nb_NotebookObject]:=
  ideNotebookSave[nb];
IDESave[nb_IDENotebookObject]:=
  IDESave[nb["Notebook"]]


(* ::Subsubsection::Closed:: *)
(*IDEClose*)



IDEClose[nb_NotebookObject, tabName_]:=
  If[ideTabExists[tabName],
    ideNotebookCloseTab[nb, tabName]
    ];
IDEClose[nb_IDENotebookObject, tabName_]:=
  IDEClose[nb["Notebook"], tabName]


(* ::Subsection:: *)
(*CreateIDENotebook*)



(* ::Subsubsection::Closed:: *)
(*createIDENotebookBar*)



createIDENotebookBar[]:=
  GridBox[{{
    GridBox[{{
      ToBoxes@toggleFileViewerButton[],
      ""
      }},
      GridBoxAlignment->{"Rows" -> {{Center}}},
      GridBoxItemSize->
        {
          "Columns" -> 
            {Full, Scaled[0.02]},
          "Rows" -> {{2.5}}
          }
      ],
    Cell[
      BoxData@
        ToBoxes@Dynamic[Refresh[ideNotebookLoadPluginsMenus[], None]],
      "IDENotebookMenu"
      ]
    }}
  ];


(* ::Subsubsection::Closed:: *)
(*createIDENotebookTabs*)



createIDENotebookTabs[]:=
  RowBox@{
    ToBoxes@Spacer[{25, 25}],
    ToBoxes@createDynamicTabRow[]
    }


(* ::Subsubsection::Closed:: *)
(*createIDENotebookDockedCell*)



createIDENotebookDockedCell[]:=
  Module[
    {
      tabs=
        createDynamicTabRow[],
      menus=
        ideNotebookLoadPluginsMenu[],
      viewer=
        toggleFileViewerButton[]
      },
    If[Length@menus[[2]]>3,
      Column[
        {
          menus[[2]]//List//Grid,
          Grid[
            {
              {
                Item[
                  Pane[viewer, ImageSize->{Scaled[1], 25},
                    BaselinePosition->Top],
                  Alignment->Right
                  ],
                Item[tabs, Alignment->Left],
                Item[menus[[1]], Alignment->Right]
                }
            },
          ItemSize->{
              {Scaled[.05], Scaled[.75], Scaled[.2]}, 
              Automatic
              },
          Alignment->{Left, Bottom}
          ]
        },
      ItemSize->{Scaled[1], Automatic},
      Dividers->{{}, {None, GrayLevel[.8]}}
      ],
      Grid[
          {
            {
              Item[
                Pane[viewer, ImageSize->{Scaled[1], 25},
                  BaselinePosition->Top],
                Alignment->Right
                ],
              Item[tabs, Alignment->Left],
              Item[
                Map[
                  Append[#, BaselinePosition->Top]&,
                  Append[menus[[2]], menus[[1]]]
                  ]//List//Grid, Alignment->Right]
              }
          },
          ItemSize->{
            {Scaled[.05], Scaled[.55], Scaled[.4]}, 
            Automatic
            },
          Alignment->{Left, Bottom}
          ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*$IDENotebookMenu*)



$IDENotebookMenu:=createIDENotebookDockedCell[];


(* ::Subsubsection::Closed:: *)
(*validateVomit*)



validateVomit[a_]:=
  (
    If[Quiet@NotebookInformation[a["Notebook"]]===$Failed, 
      PackageRaiseException[Automatic,
        "Notebook `` is invalid",
        a["Notebook"]
        ]
      ];
    If[Quiet[!TrueQ@DirectoryQ@a["Project"]],
      PackageRaiseException[Automatic,
        "Project directory `` is invalid",
        a["Project"]
        ]
      ];
    a
    )


(* ::Subsubsection::Closed:: *)
(*createIDENotebook*)



createIDENotebook[dir_String]:=
  CreateDocument@
    Notebook[
      {
        
        },
      TaggingRules->{
        $PackageName->{"Project"->{"Directory"->dir}},
        "IndentCharacter"->"  "
        },
      StyleDefinitions->
        FrontEnd`FileName[{"EasyIDE"}, "EasyIDE.nb"],
      WindowTitle->"EasyIDE: ``"~TemplateApply~FileBaseName[dir]
      ]


(* ::Subsubsection::Closed:: *)
(*CreateIDENotebook*)



CreateIDENotebook[a_Association]:=
  validateVomit@a
CreateIDENotebook[nb_NotebookObject, dir_String]:=
  CreateIDENotebook@<|
    "Notebook"->nb,
    "Project"->dir
    |>;
CreateIDENotebook[dir_String]:=
  CreateIDENotebook[
    createIDENotebook[dir],
    dir
    ]


End[];



