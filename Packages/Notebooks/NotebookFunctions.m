(* ::Package:: *)

(* Autogenerated Package *)

(* ::Text:: *)
(*IDE Notebook constructor*)



CreateIDENotebook::usage="";


(* ::Text:: *)
(*Functions for getting IDE data*)



IDEData::usage="";
IDEPath::usage="";


(* ::Text:: *)
(*The functions provided to an IDENotebookObject as methods*)



IDEOpen::usage="Open a file in the IDE notebook";
IDESave::usage="Save the active IDE notebook file";
IDEClose::usage="Close the IDE notebook";


(* ::Text:: *)
(*Tabs / toolbars / stylesheets*)



IDEToggleFileViewer::usage="Toggles the file viewer";


IDESwitchTab::usage="Switches the IDE tab";


IDEAddToolbar::usage="Adds a toolbar to the IDE";
IDERemoveToolbar::usage="Removes a toolbar from the IDE";


IDEAddStyles::usage="Adds styles to the IDE notebook";
IDERemoveStyles::usage="Removes styles from the IDE notebook";


IDEGetStylesheet::usage="Gets the IDE notebook stylesheet";
IDESetStylesheet::usage="Sets the IDE notebook stylesheet";


(* ::Text:: *)
(*Ensures the IDE has a project bound to it*)



EnsureIDEProject::usage="";


(* ::Text:: *)
(*Stuff for finding plugins*)



$PluginsPath::usage="The path to look for plugins on";


GetIDENotebookMenu::usage="Gets the menu used in the IDENotebookObjects";


(* ::Text:: *)
(*Used by plugins instead of EvaluationNotebook*)



$CurrentIDENotebook::usage=""


Begin["`Private`"];


(* ::Subsection:: *)
(*Helpers*)



(* ::Subsubsection::Closed:: *)
(*pauseDo*)



(* ::Text:: *)
(*
	Helper function to suspend the screen while updating the nb
*)



pauseDo[nb_NotebookObject, expr_]:=
  Block[{paused = If[TrueQ@paused, True, False]},
    If[paused,
      expr,
      Internal`WithLocalSettings[
        FrontEndExecute@
          FrontEnd`NotebookSuspendScreenUpdates[nb];,
        paused = True;
        expr,
        FrontEndExecute@
          FrontEnd`NotebookResumeScreenUpdates[nb];
        ]
      ]
    ];
pauseDo~SetAttributes~HoldRest


(* ::Subsubsection::Closed:: *)
(*premptiveQueuedEval*)



premptiveQueuedEval[nb_, expr_]:=
  MessageDialog[
    DynamicModule[
      {},
      Null,
      Initialization:>{
        Internal`WithLocalSettings[
          Null,
          Block[
            {
              $CurrentIDENotebook=nb
              },
            expr
            ],
          NotebookClose[EvaluationNotebook[]]
          ]
        },
      SynchronousInitialization -> False
      ],
    Visible->False,
    Evaluator->CurrentValue[nb, Evaluator]
    ];
premptiveQueuedEval~SetAttributes~HoldRest


(* ::Subsection:: *)
(*IDE Data*)



(* ::Subsubsection::Closed:: *)
(*ideNbData*)



ideNbData[nb_, {opts___}, default_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}, default];
ideNbData[nb_, {opts___}]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}];
ideNbData[nb_, opt_String, default_]:=
  ideNbData[nb, {opt}, default];
ideNbData[nb_, opt_String]:=
  ideNbData[nb, {opt}];
ideNbData[nb_]:=
  ideNbData[nb, {}];


(* ::Subsubsection::Closed:: *)
(*ideSetNbData*)



ideSetNbData[nb_, {opts___}, value_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}] = value;
ideSetNbData[nb_, opts_, value_]:=
  ideSetNbData[nb, {opts}, value];
ideSetNbDataDelayed[nb_, opts_, value_]:=
  CurrentValue[nb, 
    Flatten[{TaggingRules, $PackageName, opts}, 1]
    ] := value;
ideSetNbDataDelayed~SetAttributes~HoldRest;


(* ::Subsubsection::Closed:: *)
(*ideTmpData*)



If[!ValueQ[$ideDataCache],
  $ideDataCacheTag = $FrontEndSession;
  (* for some reason the $FrontEnd object went out of scope...? *)
  $ideDataCache=Language`NewExpressionStore["IDEState"]
  ];


ideTmpData[nb_, key_]:=
  With[{base=$ideDataCache@"get"[$FrontEndSession, nb[[2]]]},
    If[!AssociationQ@base,
      $ideDataCache@"put"[$FrontEndSession, nb[[2]], <||>];
      Missing["KeyAbset", key],
      base[key]
      ]
    ];
ideSetTmpData[nb_, key_, val_]:=
  Module[{base=$ideDataCache@"get"[$FrontEndSession, nb[[2]]]},
    If[!AssociationQ@base,
      $ideDataCache@"put"[$FrontEndSession, nb[[2]], <|key->val|>],
      base[key]=val;
      $ideDataCache@"put"[$FrontEndSession, nb[[2]], base]
      ]
    ];
ideTmpData[nb_, key_, val_]:=
  Replace[
    ideTmpData[nb, key],
    _Missing:>(ideSetTmpData[nb, key, val];val)
    ]


ideTmpDataClean[]:=
  (
    If[NotebookInformation[NotebookObject[$FrontEnd, #[[2]]]]===$Failed,
      $ideDataCache
      ]&/@Flatten[test@"listTable"[], 1]
    );


(* ::Subsubsection::Closed:: *)
(*ideActiveTab*)



ideActiveTab[nb_]:=
  ideNbData[nb, "ActiveTab", None];


(* ::Subsubsection::Closed:: *)
(*ideTabNames*)



ideTabNames[nb_]:=
  Keys@ideNbData[nb, "Tabs", {}];


(* ::Subsubsection::Closed:: *)
(*ideTabExists*)



ideTabExists[nb_, tab_]:=
  ListQ@ideNbData[nb, {"Tabs", tab}];


(* ::Subsubsection::Closed:: *)
(*ideActiveFile*)



ideActiveFile[nb_]:=
  With[{t=ideActiveTab[nb]},
    If[t=!=None,
      ideNbData[nb, {"Tabs", t, "File"}, None],
      t
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideAbsPath*)



ideAbsPath[nb_NotebookObject, file_]:=
  Module[
    {
      absFile = file,
      dir
      },
    If[ExpandFileName[absFile] =!= absFile,
      dir = ideProjectDir[nb];
      If[FileExistsQ@FileNameJoin@{dir, absFile},
        absFile = FileNameJoin@{dir, absFile},
        absFile = ExpandFileName[absFile]
        ]
      ];
    absFile
    ]


(* ::Subsubsection::Closed:: *)
(*ideViewerToggled*)



ideViewerToggled[nb_]:=
  With[
    {
      if = ideNbData[nb, {"FileViewer", "Visible"}, False],
      cell = ideTmpData[nb, "FileViewerCell"]
      },
    If[if,
      If[NotebookRead[cell]===$Failed,
        ideSetTmpData[nb, "FileViewerCell", None];
        ideSetNbData[nb, {"FileViewer", "Visible"}, False];
        False,
        True
        ],
      False
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookExpr*)



ideNotebookExpr[nb_]:=
  Module[
    {
      opts = ideNbData[nb, "Options", {}]
      },
    Notebook[
      NotebookGet[nb][[1]],
      Flatten[List@@opts]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*IDEData*)



(* ::Subsubsubsection::Closed:: *)
(*Normal*)



IDEData[nb_NotebookObject, key:_String|{__String}, default_]:=
  ideNbData[nb, key, default];
IDEData[nb_NotebookObject, key:_String|{__String}]:=
  ideNbData[nb, key];
IDEData/:
  (IDEData[nb_NotebookObject, key:_String|{__String}]=val_):=
    ideSetNbData[nb, key, val]


(* ::Subsubsubsection::Closed:: *)
(*Temporary*)



IDEData[nb_NotebookObject, PrivateKey[key_]]:=
  ideTmpData[nb, key];
IDEData[nb_NotebookObject, PrivateKey[key_], default_]:=
  ideTmpData[nb, key, default];
IDEData/:
  (IDEData[nb_NotebookObject, PrivateKey[key_]]=val_):=
    ideSetTmpData[nb, key, val]



(* ::Subsubsubsection::Closed:: *)
(*IDENotebookObject*)



IDEData[ide_IDENotebookObject, key_, default___]:=
  Module[{nb=ide["Notebook"], res},
    res = IDEData[nb, key, default];
    res/;Head[res]=!=IDEData
    ];
IDEData/:
  (IDEData[ide_IDENotebookObject, key:_String|{__String}|_PrivateKey]=val_):=
    Module[{nb=ide["Notebook"], res},
      IDEData[nb, key]=val
      ]


(* ::Subsubsection::Closed:: *)
(*ideProjectDir*)



ideProjectDir[nb_]:=
  ideNbData[nb, {"Project", "Directory"}];


(* ::Subsubsection::Closed:: *)
(*IDEPath*)



IDEPath[nb_NotebookObject, fileName_String]:=
  ideAbsPath[nb, fileName];
IDEPath[ide_IDENotebookObject, fileName_String]:=
  ideAbsPath[ide["Notebook"], fileName];


IDEPath[nb_NotebookObject]:=
  ideProjectDir[nb];
IDEPath[ide_IDENotebookObject]:=
  ideProjectDir[ide["Notebook"]];


(* ::Subsection:: *)
(*Styles*)



(* ::Subsubsection::Closed:: *)
(*getMainStylesheet*)



getMainStylesheet[nb_]:=
  Module[
    {
      s=CurrentValue[nb, StyleDefinitions]
      },
    If[Head[s]===Notebook,
      FirstCase[s, Cell[StyleData[StyleDefinitions->f_, ___], ___]:>f, None, \[Infinity]],
      s
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*setMainStylesheet*)



setMainStylesheet[nb_, f_]:=
  Module[
    {
      s=CurrentValue[nb, StyleDefinitions],
      scell,
      nbo
      },
    If[Head[s]===Notebook,
      nbo = StyleSheetNotebookObject[nb];
      scell = 
        SelectFirst[Cells[nbo], 
          MatchQ[NotebookRead[#], Cell[StyleData[StyleDefinitions->_, ___], ___]]&,
          None
          ];
      If[scell === None,
        SelectionMove[nbo, Before, Notebook];
        NotebookWrite[nbo,
          Cell[StyleData[StyleDefinitions->f]]
          ],
        NotebookWrite[
          scell,
          Cell[StyleData[StyleDefinitions->f]]
          ]
        ],
      SetOptions[nb, StyleDefinitions->f]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*getStylesheetDefsSection*)



getStylesheetDefsSection[data:{__Cell}, tag_String]:=
  Module[
    {sec},
    sec = 
      Cell[
        tag, 
        "Subsubsubsubsection",
        CellGroupingRules->{"SectionGrouping",200},
        CellTags->{tag}
        ];
    Cell[
      CellGroupData[
        Flatten@{
          sec,
          data
          },
        Closed
        ]
      ]
    ];
getStylesheetDefsSection[file:_String|_FrontEnd`FileName]:=
  Module[
    {
      fileName,
      data,
      sec
      },
    fileName=
      FrontEndExecute@
        FrontEnd`FindFileOnPath[file, "StyleSheetPath"];
    If[StringQ@fileName, 
      data = Cases[Get[fileName][[1]], Cell[_StyleData, ___], \[Infinity]];
      getStylesheetDefsSection[data, ToString@file],
      $Failed
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*addIDENotebookStyles*)



addIDENotebookStyles[nb_, styleData:_Cell, tag_]:=
  Module[
    {
      nbo,
      currDefs,
      defCells
      },
    currDefs = CurrentValue[nb, StyleDefinitions];
    If[Head[currDefs] =!= Notebook,
      CurrentValue[nb, StyleDefinitions]=
        Notebook[
          {
            Cell[StyleData[StyleDefinitions->currDefs]],
            styleData
            },
          StyleDefinitions->"PrivateStylesheetFormatting.nb"
          ],
      nbo = StyleSheetNotebookObject[nb];
      defCells = Cells[nbo, CellTags->tag];
      If[Length@defCells === 0,
        SelectionMove[nbo, After, Notebook];
        NotebookWrite[nbo, styleData]
        ]
      ]
    ]
addIDENotebookStyles[nb_, styleData:{__Cell}, tag_]:=
  addIDENotebookStyles[nb, getStylesheetDefsSection[styleData, tag], tag];


(* ::Subsubsection::Closed:: *)
(*addIDENotebookStylesheet*)



addIDENotebookStylesheet[nb_, fileName_]:=
  Module[
    {
      file = If[!StringQ[fileName], ToFileName[fileName], fileName],
      styles
      },
    styles = getStylesheetDefsSection[file];
    If[styles=!=$Failed,
      addIDENotebookStyles[nb, styles, ToString@file]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*removeIDENotebookStyles*)



removeIDENotebookStyles[nb_, tag_]:=
  Module[
    {
      nbo,
      defCells
      },
    nbo = StyleSheetNotebookObject[nb];
    defCells = Cells[nbo, CellTags->tag];
    Map[
      Function[
        SelectionMove[#, All, CellGroup];
        NotebookDelete[nbo]
        ],
      defCells
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*removeIDENotebookStylesheet*)



removeIDENotebookStylesheet[nb_, fileName_]:=
  removeIDENotebookStyles[
    nb,
    If[!StringQ[fileName], ToFileName[fileName], fileName]
    ]


(* ::Subsubsection::Closed:: *)
(*prepStyleDefs*)



prepStyleDefs[rules:{(_String->_)..}]:=
  KeyValueMap[
    Cell[
      StyleData[#],
      Sequence@@Flatten@{#2}
      ]&,
    Association@rules
    ]


(* ::Subsubsection::Closed:: *)
(*IDEAddStyles*)



IDEAddStyles//Clear


IDEAddStyles[nb_NotebookObject, styles:{__Cell}, tag_String]:=
  addIDENotebookStyles[nb, styles, tag];
IDEAddStyles[ide_IDENotebookObject, styles:{__Cell}, tag_String]:=
  IDEAddStyles[ide["Notebook"], styles, tag];


IDEAddStyles[nb_NotebookObject, styles:_String|_FrontEnd`FileName]:=
  addIDENotebookStylesheet[nb, styles];
IDEAddStyles[ide_IDENotebookObject, styles:_String|_FrontEnd`FileName]:=
  addIDENotebookStylesheet[ide["Notebook"], styles];


IDEAddStyles[
  nb_NotebookObject, 
  rules:({(_String->_)..})|(_String->_)|(_Association), 
  tag_String
  ]:=
  addIDENotebookStyles[nb, prepStyleDefs[Normal@Association[rules]], tag];
IDEAddStyles[
  ide_IDENotebookObject, 
  rules:{(_String->_)..}|(_String->_)|_Association, 
  tag_String
  ]:=IDEAddStyles[ide["Notebook"], rules, tag]


IDEAddStyles::usage="Adds styles to the IDE notebook";


(* ::Subsubsection::Closed:: *)
(*IDERemoveStyles*)



IDERemoveStyles//Clear


IDERemoveStyles[nb_NotebookObject, tag_String]:=
  If[StringEndsQ[tag, ".nb"],
    removeIDENotebookStylesheet[nb, tag];,
    removeIDENotebookStyles[nb, tag];
    ];
IDERemoveStyles[nb_NotebookObject, tag_FrontEnd`FileName]:=
  removeIDENotebookStylesheet[nb, tag];
IDERemoveStyles[ide_IDENotebookObject, tag:_FrontEnd`FileName|_String]:=
  IDERemoveStyles[ide["Notebook"], tag]


(* ::Subsubsection::Closed:: *)
(*IDEGetStylesheet*)



IDEGetStylesheet[nb_NotebookObject]:=
  getMainStylesheet[nb];
IDEGetStylesheet[ide_IDENotebookObject]:=
  IDEGetStylesheet[ide["Notebook"]];


(* ::Subsubsection::Closed:: *)
(*IDESetStylesheet*)



IDESetStylesheet[nb_NotebookObject, file:_String|_FrontEnd`FileName]:=
  setMainStylesheet[nb, file];
IDESetStylesheet[ide_IDENotebookObject, file:_String|_FrontEnd`FileName]:=
  IDESetStylesheet[ide["Notebook"], file];


(* ::Subsection:: *)
(*Notebook Manipulation*)



(* ::Subsubsection::Closed:: *)
(*ideNotebookPut*)



(* ::Text:: *)
(*
	Put a new notebook in the pane
*)



ideNotebookPut[nbObj_NotebookObject, nb_Notebook]:=
  pauseDo[
    nbObj,
    Module[
      {
        baseExpr,
        opts = Rest[nb]
        },
      ideSetNbData[nbObj, "Options", opts];
      NotebookPut[
        Notebook[nb[[1]], Options[nbObj]],
        nbObj
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*setNbFileStyle*)



getFileStylesheet[fExt_]:=
  fExt/.Get[PackageFilePath["Resources", "Settings", "ExtensionStylesMap.wl"]]


setNbFileStyle[nb_, fExt_]:=
  Module[
    {
      currentStyles = ideNbData[nb, "StyleSheet", None],
      main = getMainStylesheet[nb],
      mainName,
      targ
      },
    mainName = Replace[main, FrontEnd`FileName[_, fn_]:>StringSplit[fn, "."|"-"][[1]]];
    targ = 
      Replace[getFileStylesheet[fExt],
        {
          FrontEnd`FileName[p_, s_String?(StringStartsQ["-"])]:>
            With[{tt=mainName<>s},
              FrontEnd`FileName[p, tt]
              ],
          None:>With[{mn=mainName<>".nb"}, FrontEnd`FileName[{"EasyIDE"}, mn]]
          }
        ];
    ideSetNbData[nb, "StyleSheet", targ];
    If[targ =!= None,
      setMainStylesheet[nb, targ]
      ];
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookPutFile*)



ideNotebookPutFile[nb_NotebookObject, f_String]:=
  Module[
    {
      nbObj,
      nbExpr
      },
    Switch[FileExtension[f],
      "nb",
        nbExpr = Get[f],
      _,
        nbObj = NotebookOpen[f, Visible->False];
        nbExpr = NotebookGet[nbObj];
        NotebookClose[nbObj];
      ];
    pauseDo[
      nb,
      setNbFileStyle[nb, FileExtension[f]];
      ideNotebookPut[nb, nbExpr]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*ideNotebookSave*)



ideNotebookSave//Clear
Module[{recurseProtect},
  ideNotebookSave[nb_NotebookObject, 
    file:_String|Automatic:Automatic,
    preemptive:True|False:False
    ]:=
    Block[{recurseProtect = !preemptive&&TrueQ[recurseProtect]},
      If[!recurseProtect,
        recurseProtect=True;
        Module[
          {
            f = file,
            dir,
            nbExpr,
            nbObj
            },
          If[f === Automatic,
            f = ideActiveFile[nb]
            ];
          If[f=!=None,
            f = ideAbsPath[nb, f];
            Switch[FileExtension[f],
              "nb",
                nbExpr = ideNotebookExpr[nb];
                If[preemptive,
                  premptiveQueuedEval[nb, Export[f, nbExpr]]
                  ] (* should I just Put this? *),
              "m"|"wl",
                If[preemptive,
                  nbExpr =ideNotebookExpr[nb];
                  premptiveQueuedEval[nb,
                    Internal`WithLocalSettings[
                      nbObj = CreateDocument[nbExpr, Visible->False],
                      FrontEndExecute@
                        FrontEndToken[
                          nbObj,
                          "Save",
                          {f, "Package"}
                          ],
                      NotebookClose[nbObj]
                      ]
                    ],
                  nbObj = nb;
                  FrontEndExecute@
                    FrontEndToken[
                      nbObj,
                      "Save",
                      {f, "Package"}
                      ]
                  ],
              _,
                If[preemptive,
                  nbExpr =ideNotebookExpr[nb];
                  premptiveQueuedEval[nb,
                    Internal`WithLocalSettings[
                      nbObj = CreateDocument[nbExpr, Visible->False],
                      FrontEndExecute@
                        FrontEndToken[
                          nbObj,
                          "Save",
                          {f, "Text"}
                          ],
                      NotebookClose[nbObj]
                      ]
                    ],
                  nbObj = nb;
                  FrontEndExecute@
                    FrontEndToken[
                      nbObj,
                      "Save",
                      {f, "Text"}
                      ]
                  ]
              ]
            ]
          ]
        ]
      ]
    ]


(* ::Subsection:: *)
(*FileViewer*)



(* ::Subsubsection::Closed:: *)
(*fileViewerFilter*)



fileViewerFilter=
  c__/;(Not@StringStartsQ[c, "."]||StringStartsQ[c, ".git"]);


(* ::Subsubsection::Closed:: *)
(*fileEntryContextMenu*)



fileEntryContextMenu[file_]:=
  With[
    {
      en=ExpandFileName[file],
      f=
        "file://"<>ExternalService`EncodeString[ExpandFileName[file],"/\\"],
      d=
        "file://"<>ExternalService`EncodeString[ExpandFileName@DirectoryName[file],"/\\"]
      },
      {  
        MenuItem["Copy File Name",
          FrontEndExecute[FrontEnd`CopyToClipboard[en]]
          ],    
        MenuItem["Open Externally",
          KernelExecute[FrontEndExecute[FrontEnd`SystemOpen[f]]],
          MenuEvaluator->Automatic
          ],
        MenuItem["Open Parent",
          KernelExecute@FrontEndExecute[FrontEnd`SystemOpen[d]],
          MenuEvaluator->Automatic
          ]
        }
      ]


(* ::Subsubsection::Closed:: *)
(*fileViewer*)



fileViewer//Clear
fileViewer[
  st:Verbatim[Dynamic][stt_],
  root_, 
  smap_,
  refreshHandle:Verbatim[Dynamic][_]:Dynamic[None],
  fileFilter:_StringPattern`StringPatternQ:fileViewerFilter
  ]:=
  DynamicModule[
    {
      styles = If[!AssociationQ@smap, <|"Directory"->{}, "File"->smap|>, smap],
      fileViewerCell,
      getDirColumn,
      setDeleteState,
      getDirectoryToggle,
      getToggleListener,
      filter = fileFilter
      },
    If[!AssociationQ[stt], stt=<||>];
    If[!KeyExistsQ[styles, "Directory"],
      styles["Directory"]={}
      ];
    If[!KeyExistsQ[styles, "File"],
      styles["File"]={}
      ];
    Replace[refreshHandle,
      Verbatim[Dynamic][refresh_]:>
        Dynamic[
          refresh;
          fileViewerCell[Dynamic[stt], root, styles],
          TrackedSymbols:>{refresh}
          ]
      ],
    Initialization:>{
      getDirColumn[s_, dir_, styl_]:=
        If[DirectoryQ[#], 
          fileViewerCell[s, #, styl],
          Replace[
            styl["File"],
            {
              f_Function:>f[#],
              e_:>Style[FileNameTake[#], e]
              }
            ]
          ]&/@FileNames[filter, dir]//Column;,
      setDeleteState[s:Verbatim[Dynamic][state_], dir_, styl_][val_, old_]:=
        (
          If[!KeyExistsQ[state, dir], state[dir]=<||>];
          If[val,
            state[dir, "Listing"]=
              getDirColumn[s, dir, styl],
            state[dir, "Listing"]=.
            ];
          state[dir, "Visible"]=val;
          ),
      getDirectoryToggle[s:Verbatim[Dynamic][state_], dir_, styl_]:=
        EventHandler[
          Replace[
            styl["Directory"],
            {
              f_Function:>f[dir],
              e_:>Style[FileNameTake[dir], e]
              }
            ],
          {
            "MouseClicked":>
              With[{old=Lookup[Lookup[state, dir, <||>], "Visible", False]},
                setDeleteState[s, dir, styl][!old, old]
                ],
            PassEventsDown->True,
            PassEventsUp->True
            }
          ],
      getToggleListener[s:Verbatim[Dynamic][state_], dir_]:=
        Replace[
          If[!KeyExistsQ[state, dir], state[dir]=<||>];
          Lookup[state[dir], "Listener", Null],
          Null:>
            (state[dir, "Listener"]=Module[{toggleListener}, toggleListener])
          ],
      fileViewerCell[s:Verbatim[Dynamic][state_], dir_, styl_]:=
        (*With[{toggler=getToggleListener[s, dir]},*)
          PaneSelector[
            {
              False->
                Grid[
                  {
                    {
                      Opener[
                        Dynamic[
                          Lookup[Lookup[state, dir, <||>], "Visible", False],
                          setDeleteState[s, dir, styl]
                          ]
                        ], 
                      getDirectoryToggle[s, dir, styl]
                      }
                    },
                  Alignment->Left
                  ],
              True->
                Grid[
                  {
                    {
                      Opener[
                        Dynamic[
                          Lookup[Lookup[state, dir, <||>], "Visible", False],
                          setDeleteState[s, dir, styl]
                          ]
                        ], 
                      getDirectoryToggle[s, dir, styl]
                      },
                    {Null, 
                      Dynamic[
                        state[dir, "Listing"],
                        TrackedSymbols:>{state}
                        ]}
                    },
                  Alignment->Left
                  ]
              },
            Dynamic[
              Lookup[Lookup[state, dir, <||>], "Visible", False],
              setDeleteState[s, dir, styl]
              ],
            BaseStyle->"FileViewerOpener"
            ]
        }
    ]


(* ::Subsubsection::Closed:: *)
(*getFileViewerCell*)



getStateSym[nb_]:=
  ideTmpData[
    nb,
    "FileViewerState",
    With[{state=Unique["state"<>ToString[RandomInteger[{100, 200}]]<>"$"]},
      SetAttributes[state, Temporary];
      Dynamic[state]
      ]
    ];


getFileViewerCell[nb_]:=
  Cell[
    BoxData@ToBoxes@
      Pane[
        fileViewer[
          getStateSym[nb],
          ideProjectDir[nb],
          <|
            "Directory"->{
              "FileViewerDirectory"
              }, 
            "File"->
              Function[
                EventHandler[
                  MouseAppearance[
                    Style[FileNameTake[#], 
                      "FileViewerFile",
                      ContextMenu->fileEntryContextMenu[#]
                      ], 
                    "LinkHand"
                    ],
                  {
                    "MouseClicked":>
                      (
                        If[CurrentValue["MouseClickCount"]==2, 
                          IDEOpen[nb, #]
                          ]
                        ),
                    PassEventsUp->True,
                    PassEventsDown->True
                    }
                  ]
                ]
            |>,
          ideTmpData[nb, {"FileViewer", "RefreshHook"}, Dynamic[fileViewerRefresh]]
          ],
        BaseStyle->"FileViewerPane"
        ],
    "FileViewerCell",
    "DockedCell"
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookToggleFileBrowser*)



ideNotebookToggleFileBrowser[nb_]:=
  If[!ideViewerToggled[nb],
    ideSetNbData[nb, {"FileViewer", "Visible"}, True];
    ideSetTmpData[
      nb,
      "FileViewerCell",
      FEAttachCell[
        nb, 
        getFileViewerCell[nb],
        Automatic,
        {Left, Top},
        {Left, Top},
        {"EvaluatorQuit"}
        ]
      ];
    addIDENotebookStylesheet[
      nb, 
      FrontEnd`FileName[{"EasyIDE", "Private"}, "FileViewer.nb"]
      ],
    With[{c=ideTmpData[nb, "FileViewerCell"]},
      If[NotebookRead[c]=!=$Failed, NotebookDelete[c]]
      ];
    removeIDENotebookStylesheet[
      nb, 
      FrontEnd`FileName[{"EasyIDE", "Private"}, "FileViewer.nb"]
      ];
    ideSetTmpData[nb, "FileViewerCell", None];
    ideSetNbData[nb, {"FileViewer", "Visible"}, False]
    ];


(* ::Subsubsection::Closed:: *)
(*toggleFileViewerButton*)



toggleFileViewerButton//Clear
toggleFileViewerButton[nb_:Automatic]:=
  Button[
    "\[Congruent]",
    ideNotebookToggleFileBrowser[Replace[nb, Automatic:>EvaluationNotebook[]]],
    BaseStyle->"FileViewerToggleButton",
    Appearance->Inherited
    ]


(* ::Subsubsection::Closed:: *)
(*IDEToggleFileViewer*)



IDEToggleFileViewer[nb_NotebookObject]:=
  ideNotebookToggleFileBrowser[nb];
IDEToggleFileViewer[ide_IDENotebookObject]:=
  IDEToggleFileViewer[ide["Notebook"]];


(* ::Subsection:: *)
(*Plugins*)



(* ::Subsubsection::Closed:: *)
(*$PluginsPath*)



$PluginsPath = 
  {
    FileNameJoin@{$UserBaseDirectory, "ApplicationData", "EasyIDE", "Plugins"},
    PackageFilePath["Resources", "Plugins"]
    } 


(* ::Subsubsection::Closed:: *)
(*loadPlugin*)



Quiet[
  System`MenuKey;
  System`MenuItem;
  ]


(* ::Text:: *)
(*
	MenuCommands get loaded into the main menu bar, ActionMenus get stuck into the DockedCell, and 
	some day MenuItem expressions will get dumped into the main menu.
*)



loadPlugin[file_String]:=
  Module[
    {
      pluginData
      },
    PackageExecute[
      Internal`WithLocalSettings[
        Begin["`Plugins`"],
        pluginData = Get[file],
        End[]
        ]
      ];
    If[!AssociationQ@pluginData,
      If[ListQ[pluginData],
        pluginData = 
          <|
            "Name"->FileBaseName[file],
            "Commands"->pluginData
            |>,
        pluginData = 
          <|
            "Name"->FileBaseName[file],
            "Menu"->pluginData
            |>
        ]
      ];
    If[!KeyExistsQ[pluginData, "Type"],
      pluginData["Type"]=
        If[KeyExistsQ[pluginData, "Commands"], "Commands", "Menu"]
      ];
    If[pluginData["Type"]==="Commands",
      pluginData["Commands"]=
        pluginData["Name"]->pluginData["Commands"]
      ];
    normalizePlugin@pluginData
    ]


(* ::Subsubsection::Closed:: *)
(*normalizePlugin*)



normalizePlugin[a_Association]:=
  Module[{plugin=a},
    Which[plugin["Type"]=="Menu",
      If[ListQ@plugin["Menu"],
        plugin["Menu"]=
          ActionMenu[
            Button[
              plugin["Name"], 
              "",
              BaseStyle->"PluginMenu",
              Appearance->Inherited
              ],
            Replace[
              plugin["Menu"],
              {
                (l_:>c_):>
                  (l:>(premptiveQueuedEval[EvaluationNotebook[], c]))
                },
              1
              ],
            BaseStyle->"PluginMenu",
            MenuAppearance->"PluginMenuList"
            ]
        ]
      ];
    plugin
    ]


(* ::Subsubsection::Closed:: *)
(*getPluginData*)



getPluginData[]:=
  Module[
    {baseData},
    baseData=
      Map[
        loadPlugin,
        FileNames[__~~(".wl"|".m"), $PluginsPath]
        ];
    baseData =
      GroupBy[baseData, #Type&];
    If[!KeyExistsQ[baseData, "Menu"], baseData["Menu"]={}];
    If[!KeyExistsQ[baseData, "Commands"], baseData["Commands"]={}];
    baseData
    ]


(* ::Subsubsection::Closed:: *)
(*Make Menu*)



(* ::Subsubsubsection::Closed:: *)
(*makeMenuExpr*)



makeMenuExpr[s:Verbatim[Dynamic][state_], menuList_]:=
  Pane[
    Panel[
      Column[
        makeMenuCommand[s, #]&/@menuList
        ],
      BaseStyle->"CascadingMenuMain"
      ],
    BaseStyle->"CascadingMenuMain",
    ImageSizeAction->"Clip"
    ];


(* ::Subsubsubsection::Closed:: *)
(*makeMenuCommand*)



makeMenuCommand//Clear


makeMenuCommand[s:Verbatim[Dynamic][state_], label_->list_List]:=
    Button[
      Grid[
        {
          {
            Pane[label, {90, Automatic}, Alignment->{Left, Top}], 
            Pane["\[RightPointer]", {10, Automatic}, Alignment->{Left, Top}]
            }
          },
        GridBoxItemSize->Inherited
        ],
      attachMenuExpr[s, EvaluationBox[], makeMenuExpr[s, list]],
      BaseStyle->"CascadingMenuSubmenu",
      Appearance->Inherited
      ]


makeMenuCommand[s:Verbatim[Dynamic][state_], label_:>command_]:=
  EventHandler[
    Button[
      label,
      Internal`WithLocalSettings[
        Null,
        premptiveQueuedEval[EvaluationNotebook[], command],
        destroyMenu[s]
        ],
      ButtonData:>s,
      BaseStyle->"CascadingMenuCommand",
      Appearance->Inherited
      ],
  {
    "MouseEntered":> pruneMenu[s, EvaluationCell[], False],
    PassEventsDown->True
    }
  ];


makeMenuCommand[s:Verbatim[Dynamic][state_], Delimiter]:=
  Framed["", 
    FrameStyle->GrayLevel[.8],
    ImageSize->{Scaled[1], 0},
    FrameMargins->{{0, 0}, {-1, 0}}
    ]


(* ::Subsubsubsection::Closed:: *)
(*pruneMenu*)



pruneMenu[s:Verbatim[Dynamic][state_], root_, pruneHead:True|False:True]:=
  Module[
    {
      kid
      },
    kid = state[root]["Submenu"];
    pauseDo[
      ParentNotebook@root,
      If[Head[kid]===CellObject,
        pruneMenu[s, kid]
        ];
      If[pruneHead, 
        NotebookDelete[root];
        If[KeyExistsQ[state, root],
          state[root]=.
          ],
        If[KeyExistsQ[state, root],
          state[root, "Submenu"]=.;
          state[root, "MenuBox"]=.;
          ]
        ]
      ];
    ]


(* ::Subsubsubsection::Closed:: *)
(*destroyMenu*)



destroyMenu[s:Verbatim[Dynamic][state_]]:=
  (
    pruneMenu[s, state["RootCell"], True];
    state["RootCell"]=.;
    state["Root"]=.;
    )


(* ::Subsubsubsection::Closed:: *)
(*attachMenuExpr*)



attachMenuExpr[s:Verbatim[Dynamic][state_], parentBox_, menuExpr_]:=
  Module[
    {
      parentCell,
      cell,
      currentKids
      },
    parentCell = ParentCell@parentBox;
    If[!KeyExistsQ[state, parentCell], 
      state[parentCell] = <||>
      ];
    If[state[parentCell, "MenuBox"] =!= parentBox || 
        (
          Head[state[parentCell, "Submenu"]]===CellObject&&
            NotebookRead[state[parentCell, "Submenu"]] === $Failed
          ),
      pruneMenu[s, parentCell, False];
      cell=
        FEAttachCell[
          parentBox,
          menuExpr,
          Automatic,
          {Left, Top},
          {Right, Top},
          {"EvaluatorQuit"}
          ];
      state[parentCell, "MenuBox"] = parentBox;
      state[parentCell, "Submenu"] = cell
      ];
    ];


(* ::Subsubsubsection::Closed:: *)
(*makeMenu*)



makeMenu//Clear
makeMenu[
  stateTracker:(Verbatim[Dynamic][_](*|None*)),
  parentBox:_BoxObject|Automatic:Automatic, 
  menuCommands_
  ]:=
  With[
    {
      box=Replace[parentBox, Automatic:>EvaluationBox[]],
      state=
        Replace[stateTracker, 
          None:>Module[{menuState}, Dynamic[menuState]]
          ]
      },
    Replace[state,
      s:Verbatim[Dynamic][menuState_]:>
        Replace[
          FEAttachCell[
            box,
            If[!AssociationQ[menuState], menuState=<||>];
            menuState["Root"] = box;
            makeMenuExpr[s, Append[menuCommands, Style["Cancel", Italic]:>None]],
            Automatic,
            {Right, Bottom},
            {Right, Top},
            {(*"OutsideMouseClick", *)"ParentChanged", "EvaluatorQuit"}
            ],
          c_CellObject:>(menuState["RootCell"] = c)
          ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookLoadPluginsMenu*)



ideNotebookLoadPluginsMenu[]:=
  With[{data=getPluginData[]},
    Module[{pluginMenuState},
      {
        Button[
          "Plugins",
          If[!AssociationQ[pluginMenuState],
            pluginMenuState=<||>
            ];
          If[Length[pluginMenuState]>0,
            destroyMenu[Dynamic[pluginMenuState]],
            makeMenu[Dynamic[pluginMenuState], EvaluationBox[], 
              Lookup[data["Commands"], "Commands"]
              ]
            ],
          BaseStyle->"PluginMenu",
          Appearance->Inherited,
          ImageSize->{Automatic, Automatic}
          ],
        Lookup[data["Menu"], "Menu"]
        }
      ]
    ]


(* ::Subsection:: *)
(*Tabbing*)



(* ::Subsubsection::Closed:: *)
(*createDynamicTabRow*)



createDynamicTabRow[refresh_]:=
  With[
    {
      tns=
        Quiet@Block[
          {CurrentValue=cv}, 
          ideTabNames[FrontEnd`EvaluationNotebook[]]
          ]
      },
    Dynamic[
      refresh;
      Pane[Row@Map[createTabObject, tns], {Automatic, 35}, Alignment->Bottom],
      TrackedSymbols:>{refresh}
      ]/.cv->CurrentValue
    ]


(* ::Subsubsection::Closed:: *)
(*ideSetTab*)



ideSetTab[nb_, tabName_]:=
  ideSetNbData[nb, "ActiveTab", tabName]


(* ::Subsubsection::Closed:: *)
(*createTabObject*)



createTabObject[tabName_String]:=
  Panel[
    Row@{
        Spacer[15],
        MouseAppearance[
          EventHandler[tabName, 
            "MouseClicked":>
              ideNotebookSwitchTab[EvaluationNotebook[], tabName]],
          "LinkHand"
          ],
        Spacer[3],
        Button["", 
         ideNotebookCloseTab[EvaluationNotebook[], tabName], 
          BaseStyle->"TabCloseButton",
          Appearance->Inherited
          ]
        },
    ImageSize->{Automatic, 25},
    BaseStyle->
      With[
          {
            c=
              Block[
                {CurrentValue=FrontEnd`CurrentValue}, 
                ideNbData[FrontEnd`EvaluationNotebook[], "ActiveTab"]
                ]
            },
          FEPrivate`If[FEPrivate`SameQ[c, tabName], 
            "TabPanelActive", 
            "TabPanelBackground"
            ]
          ],
    BoxID->tabName<>"-tab"
    ]


(* ::Subsubsection::Closed:: *)
(*tabObjectPattern*)



tabObjectPattern[tabName_]:=
  Panel[___, BoxID->tabName, ___]


(* ::Subsubsection::Closed:: *)
(*refreshTabs*)



refreshTabs[nb_]:=
  Replace[
    IDEData[nb, PrivateKey["TabsRefreshHandle"]],
    Hold[var_]:>(var=RandomReal[])
    ];


(* ::Subsubsection::Closed:: *)
(*ideNotebookCreateTab*)



ideNotebookCreateTab[nb_NotebookObject, tabName_String, tabData_]:=
  (
    ideSetNbData[nb, {"Tabs", tabName}, tabData];
    refreshTabs[]
    )


(* ::Subsubsection::Closed:: *)
(*ideNotebookSwitchTab*)



ideNotebookSwitchTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      file,
      active = ideActiveTab[nb]
      },
    If[active =!= tabName,
      If[saveCurrent, ideNotebookSave[nb]];
      file = ideNbData[nb, {"Tabs", tabName, "File"}];
      ideNotebookPutFile[nb, file];
      ideSetTab[nb, tabName];
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookCloseTab*)



ideNotebookCloseTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      active = ideActiveTab[nb],
      tabs = ideNbData[nb, "Tabs"]
      },
    If[MemberQ[Keys@tabs, tabName],
      pauseDo[
        nb,
        tabs = DeleteCases[tabs, tabName->_];
        If[tabName == active,
          If[Length@tabs > 0,
            ideNotebookSwitchTab[nb, Keys[tabs][[1]]],
            If[saveCurrent, ideNotebookSave[nb]];
            ideNotebookPut[nb, Notebook[{}]];
            ideSetNbData[nb, "ActiveTab", None];
            ]
          ];
        ideSetNbData[nb, "Tabs", tabs];
        refreshTabs[]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*IDESwitchTab*)



IDESwitchTab[nb_NotebookObject, tagName_]:=
  ideNotebookSwitchTab[nb, tagName];
IDESwitchTab[ide_IDENotebookObject, tagName_]:=
  IDESwitchTab[ide["Notebook"], tagName];


(* ::Subsection:: *)
(*Toolbars*)



(* ::Subsubsection::Closed:: *)
(*refreshToolbars*)



refreshToolbars[nb_]:=
  Replace[
    IDEData[nb, PrivateKey["ToolbarRefreshHandle"]],
    Hold[var_]:>(var=RandomReal[])
    ]


(* ::Subsubsection::Closed:: *)
(*makeIDEToolbarGrid*)



makeIDEToolbarGrid[nb_, tags_]:=
  With[{data=Lookup[IDEData[nb, {"Toolbars", "Cells"}], tags]},
    If[Length@data===0,
      None,
      GridBox[
        Thread[{data}],
        BaseStyle->"Toolbars"
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*removeIDENotebookToolbar*)



removeIDENotebookToolbar[nb_, tag_]:=
  Module[{cell, tools, tags},
    pauseDo[
      nb,
      tags = IDEData[nb, {"Toolbars", "Tags"}, {}];
      If[!ListQ@tags, tags = {}];
      If[MemberQ[tags, tag], 
        IDEData[nb, {"Toolbars", "Tags"}] = DeleteCases[tags, tag];
        IDEData[nb, {"Toolbars", "Cells", tag}] = None
        ];
      If[MemberQ[tags, tag],
        IDEData[nb, {"Toolbars", "Column"}] = 
          makeIDEToolbarGrid[nb, DeleteCases[tags, tag]]
        ]
      ];
    refreshToolbars[nb]
    ]


(* ::Subsubsection::Closed:: *)
(*addIDENotebookToolbar*)



addIDENotebookToolbar[nb_, toolbar_, tag_]:=
  Module[{cell, tools, tags},
    tools = Flatten@{toolbar};
    tools=
      If[Head[#]=!=Cell,
        StyleBox[ToBoxes[#], "ToolbarElement"],
        #
        ]&/@tools;
    tools =GridBox[Map[List, tools], BaseStyle->"ToolbarCell", BoxID->tag];
    pauseDo[
      nb,
      tags = IDEData[nb, {"Toolbars", "Tags"}, {}];
      If[!ListQ@tags, tags = {}];
      If[!MemberQ[tags, tag], 
        IDEData[nb, {"Toolbars", "Tags"}] = Append[tags, tag];
        ];
      IDEData[nb, {"Toolbars", "Cells", tag}] = tools;
      If[IDEData[nb, {"Toolbars", "Cells", tag}] =!= tools,
        IDEData[nb, {"Toolbars", "Cells"}] = {};
        IDEData[nb, {"Toolbars", "Cells", tag}] = tools;
        ];
      IDEData[nb, {"Toolbars", "Column"}] = 
        makeIDEToolbarGrid[nb, Append[tags, tag]];
      ];
    refreshToolbars[nb]
    ]


(* ::Subsubsection::Closed:: *)
(*createDynamicToolbarsCell*)



createDynamicToolbarsCell[toolbarRefresh_]:=
  With[
    {
      h=
        FrontEnd`CurrentValue[
          FrontEnd`EvaluationNotebook[], 
          {TaggingRules, "EasyIDE", "Toolbars", "Column"},
          None
          ]
     },
    DynamicBox[
      FEPrivate`If[
        FEPrivate`SameQ[FEPrivate`Head[h], GridBox],
        h,
        PaneBox["", ImageSize->{1, 2}]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*IDEAddToolbar*)



IDEAddToolbar[nb_NotebookObject, toolbar_, tag_String]:=
  (addIDENotebookToolbar[nb, toolbar, tag];);
IDEAddToolbar[ide_IDENotebookObject, toolbar_, tag_String]:=
  IDEAddToolbar[ide["Notebook"], toolbar, tag];


(* ::Subsubsection::Closed:: *)
(*IDERemoveToolbar*)



IDERemoveToolbar[nb_NotebookObject, tag_String]:=
  (removeIDENotebookToolbar[nb, tag];);
IDERemoveToolbar[ide_IDENotebookObject, tag_String]:=
  IDERemoveToolbar[ide["Notebook"], tag];


(* ::Subsection:: *)
(*File Operations*)



(* ::Subsubsection::Closed:: *)
(*getFileTabName*)



getFileTabName[nb_, f_]:=
  Module[
    {
      tabs = ideNbData[nb, "Tabs"],
      tns,
      tabName
      },
    tabName =
      Do[If[Lookup[t[[2]], "File"]==f, Return[t[[1]], Do]], {t, tabs}];
    If[tabName===Null,
      tabName = FileBaseName[f];
      tns = tabs[[All, 1]];
      If[MemberQ[tns, tabName],
        tabName = tabName <> "." <> FileExtension[f]
        ];
      tabName=
        NestWhile[
          # <> "/" <> FileNameTake[f, -Length[URLParse[#, "Path"]]]&,
          tabName,
          MemberQ[tns, #]&,
          1,
          FileNameDepth[f]-1
          ]
      ];
    tabName
    ]


(* ::Subsubsection::Closed:: *)
(*IDEOpen*)



IDEOpen[nb_NotebookObject, f_String?FileExistsQ]:=
  Module[
    {
      nbObj,
      nbExpr,
      tabName
      },
    tabName = getFileTabName[nb, f];
    If[!TrueQ@ideTabExists[nb, tabName],
      ideNotebookCreateTab[nb, tabName, 
        {
          "File"->f  
          }
        ]
      ];
    ideNotebookSwitchTab[nb, tabName]
    ];
IDEOpen[nb_IDENotebookObject, f_String?FileExistsQ]:=
  IDEOpen[nb["Notebook"], f];


(* ::Subsubsection::Closed:: *)
(*IDESave*)



IDESave[nb_NotebookObject]:=
  ideNotebookSave[nb];
IDESave[nb_IDENotebookObject]:=
  IDESave[nb["Notebook"]]


(* ::Subsubsection::Closed:: *)
(*IDEClose*)



IDEClose[nb_NotebookObject, tabName_]:=
  If[ideTabExists[tabName],
    ideNotebookCloseTab[nb, tabName]
    ];
IDEClose[nb_IDENotebookObject, tabName_]:=
  IDEClose[nb["Notebook"], tabName]


(* ::Subsection:: *)
(*CreateIDENotebook*)



(* ::Subsubsection::Closed:: *)
(*createIDENotebookDockedCell*)



createIDENotebookDockedCell[nb_]:=
  With[
    {
      tabRowRefresh = Unique[tabRowRefresh],
      toolbarRefresh = Unique[toolbarRefresh]
      },
    IDEData[nb, PrivateKey["TabsRefreshHandle"]]=Hold[tabRowRefresh];
    IDEData[nb, PrivateKey["ToolbarRefreshHandle"]]=Hold[toolbarRefresh];
    Module[
      {
        tabs=
          createDynamicTabRow[tabRowRefresh],
        toolbars=
          createDynamicToolbarsCell[toolbarRefresh],
        menus=
          ideNotebookLoadPluginsMenu[],
        viewer=
          toggleFileViewerButton[]
        },
      Cell[
        BoxData@
          If[Length@menus[[2]]>3,
            GridBox[
              {
                {PanelBox[toolbars, BaseStyle->"MainMenuTwoRowToolbars"]},
                {ToBoxes@Panel[
                  Column[
                    {
                      Grid[
                        menus[[2]]//List, 
                        BaseStyle->"MainMenuTwoRowTop",
                        GridBoxItemSize->Inherited
                        ],
                      Grid[
                        {{viewer, tabs, menus[[1]]}},
                        BaseStyle->"MainMenuTwoRowBottom",
                        GridBoxItemSize->Inherited
                        ]
                      },
                    BaseStyle->"MainMenuTwoRow"
                    ],
                  BaseStyle->"MainMenuTwoRow"
                  ]}
              },
            BaseStyle->"MainMenu"
            ],
          GridBox[
            {
              {PanelBox[toolbars, BaseStyle->"MainMenuOneRowToolbars"]},
              {ToBoxes@Panel[
                Grid[
                  {
                    {
                      viewer,
                      tabs,
                      Grid[
                        {Append[menus[[2]], menus[[1]]]},
                        BaseStyle->"MainMenuOneRowPlugins",
                        GridBoxItemSize->Inherited
                        ]
                      }
                    },
                  BaseStyle->"MainMenuOneRow",
                  GridBoxItemSize->Inherited
                  ],
                BaseStyle->"MainMenuOneRow"
                ]}
            },
          BaseStyle->"MainMenu"
          ]
        ],
      "MainMenuCell"
      ]
    ]
  ];


(* ::Subsubsection::Closed:: *)
(*GetIDENotebookMenu*)



GetIDENotebookMenu[nb_:Automatic]:=
  createIDENotebookDockedCell@
    Replace[nb, Automatic:>EvaluationNotebook[]];


(* ::Subsubsection::Closed:: *)
(*EnsureIDEProject*)



EnsureIDEProject[nb_]:=
  Module[{p=IDEPath[nb]},
    If[!(StringQ[p]&&DirectoryQ[p]),
      premptiveQueuedEval[
        nb,
        p = SystemDialogInput[
          "Directory",
          $HomeDirectory,
          WindowTitle->"IDE Directory"
          ];
        If[(StringQ[p]&&DirectoryQ[p]),
          IDEData[nb, {"Project", "Directory"}]=p
          ]
        ]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*validateVomit*)



validateVomit[a_]:=
  (
    If[Quiet@NotebookInformation[a["Notebook"]]===$Failed, 
      PackageRaiseException[Automatic,
        "Notebook `` is invalid",
        a["Notebook"]
        ]
      ];
    If[Quiet[!TrueQ@DirectoryQ@a["Project"]],
      PackageRaiseException[Automatic,
        "Project directory `` is invalid",
        a["Project"]
        ]
      ];
    a
    )


(* ::Subsubsection::Closed:: *)
(*createIDENotebook*)



createIDENotebook[dir_String]:=
  CreateDocument@
    Notebook[
      {
        
        },
      TaggingRules->{
        $PackageName->{"Project"->{"Directory"->dir}},
        "IndentCharacter"->"  "
        },
      StyleDefinitions->
        Notebook[
          {
            Cell[
              StyleData[
                StyleDefinitions->FrontEnd`FileName[{"EasyIDE"}, "LightMode.nb"]
                ]
              ]
            },
          StyleDefinitions->"PrivateStylesheetFormatting.nb"
          ],
      WindowTitle->"EasyIDE: ``"~TemplateApply~FileBaseName[dir]
      ]


(* ::Subsubsection::Closed:: *)
(*CreateIDENotebook*)



CreateIDENotebook[a_Association]:=
  validateVomit@a
CreateIDENotebook[nb_NotebookObject, dir_String]:=
  CreateIDENotebook@<|
    "Notebook"->nb,
    "Project"->dir
    |>;
CreateIDENotebook[dir_String]:=
  CreateIDENotebook[
    createIDENotebook[dir],
    dir
    ]


End[];



