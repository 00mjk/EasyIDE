(* ::Package:: *)

(* Autogenerated Package *)

CreateIDENotebook::usage="";


IDEOpen::usage="";
IDESave::usage="";
IDEClose::usage="";


AttachFileViewer::usage="Creates the IDE notebook AttachedCell";
LoadIDEPlugin::usage="";
CreatePluginMenu::usage="Sets the ContextMenu for the plugins";


LoadIDESettings::usage="";
SaveIDESettings::usage="";


SetIDEStylesheet::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Helpers*)



(* ::Subsubsection::Closed:: *)
(*pauseDo*)



(* ::Text:: *)
(*
	Helper function to suspend the screen while updating the nb
*)



pauseDo[nb_NotebookObject, expr_]:=
  Internal`WithLocalSettings[
    FrontEndExecute@
      FrontEnd`NotebookSuspendScreenUpdates[nb],
    expr,
    FrontEndExecute@
      FrontEnd`NotebookResumeScreenUpdates[nb]
    ];
pauseDo~SetAttributes~HoldRest


(* ::Subsection:: *)
(*IDE Data*)



(* ::Subsubsection::Closed:: *)
(*ideNbData*)



ideNbData[nb_, {opts___}, default_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}, default];
ideNbData[nb_, {opts___}]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}];
ideNbData[nb_, opt_String, default_]:=
  ideNbData[nb, {opt}, default];
ideNbData[nb_, opt_String]:=
  ideNbData[nb, {opt}];
ideNbData[nb_]:=
  ideNbData[nb, {}];


(* ::Subsubsection::Closed:: *)
(*ideSetNbData*)



ideSetNbData[nb_, {opts___}, value_]:=
  CurrentValue[nb, {TaggingRules, $PackageName, opts}] = value;
ideSetNbData[nb_, opts_, value_]:=
  ideSetNbData[nb, {opts}, value];
ideSetNbDataDelayed[nb_, opts_, value_]:=
  CurrentValue[nb, 
    Flatten[{TaggingRules, $PackageName, opts}, 1]
    ] := value;
ideSetNbDataDelayed~SetAttributes~HoldRest;


(* ::Subsubsection::Closed:: *)
(*ideActiveTab*)



ideActiveTab[nb_]:=
  ideNbData[nb, "ActiveTab", None];


(* ::Subsubsection::Closed:: *)
(*ideTabNames*)



ideTabNames[nb_]:=
  Keys@ideNbData[nb, "Tabs", {}];


(* ::Subsubsection::Closed:: *)
(*ideTabExists*)



ideTabExists[nb_, tab_]:=
  ListQ@ideNbData[nb, {"Tabs", tab}];


(* ::Subsubsection::Closed:: *)
(*ideProjectDir*)



ideProjectDir[nb_]:=
  ideNbData[nb, {"Project", "Directory"}];


(* ::Subsubsection::Closed:: *)
(*ideActiveFile*)



ideActiveFile[nb_]:=
  With[{t=ideActiveTab[nb]},
    If[t=!=None,
      ideNbData[nb, {"Tabs", t, "File"}, None],
      t
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideAbsPath*)



ideAbsPath[nb_NotebookObject, file_]:=
  Module[
    {
      absFile = file,
      dir
      },
    If[ExpandFileName[absFile] =!= absFile,
      dir = ideProjectDir[nb];
      If[FileExistsQ@FileNameJoin@{dir, absFile},
        absFile = FileNameJoin@{dir, absFile},
        absFile = ExpandFileName[absFile]
        ]
      ];
    absFile
    ]


(* ::Subsubsection::Closed:: *)
(*ideViewerToggled*)



ideViewerToggled[nb_]:=
  With[{if=ideNbData[nb, "FileViewerVisible", False]},
    If[if,
      If[Length@Options[ideNbData[nb, "FileViewerCell"]]==0,
        ideSetNbData[nb, "FileViewerCell", None];
        ideSetNbData[nb, "FileViewerVisible", False];
        False,
        True
        ],
      False
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookExpr*)



ideNotebookExpr[nb_]:=
  Module[
    {
      opts = ideNbData[nb, "Options", {}]
      },
    Notebook[
      NotebookGet[nb][[1]],
      opts
      ]
    ]


(* ::Subsection:: *)
(*Notebook Manipulation*)



(* ::Subsubsection::Closed:: *)
(*ideNotebookPut*)



(* ::Text:: *)
(*
	Put a new notebook in the pane
*)



ideNotebookPut[nbObj_NotebookObject, nb_Notebook]:=
  pauseDo[
    nbObj,
    Module[
      {
        baseExpr,
        opts = Rest[nb]
        },
      ideSetNbData[nbObj, "Options", opts];
      NotebookPut[
        Notebook[nb[[1]], Options[nbObj]],
        nbObj
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookPutFile*)



ideNotebookPutFile[nb_NotebookObject, f_String]:=
  Module[
    {
      nbObj,
      nbExpr
      },
    Switch[FileExtension[f],
      "nb",
        nbExpr = Get[f],
      _,
        nbObj = NotebookOpen[f, Visible->False];
        nbExpr = NotebookGet[nbObj];
        NotebookClose[nbObj];
      ];
    ideNotebookPut[nb, nbExpr]
    ];


(* ::Subsubsection::Closed:: *)
(*ideNotebookSave*)



ideNotebookSave[nb_NotebookObject, file_:Automatic]:=
  Module[
    {
      f = file,
      dir,
      nbExpr,
      nbObj
      },
    If[f === Automatic,
      f = ideActiveFile[nb]
      ];
    If[f=!=None,
      f = ideAbsPath[nb, f];
      Switch[FileExtension[f],
        "nb",
          nbExpr = ideNotebookExpr[nb];
          Export[f, nbExpr] (* should I just Put this? *),
        "m"|"wl",
          nbExpr = Quiet@ideNotebookExpr[nb];
          Internal`WithLocalSettings[
            nbObj = CreateDocument[Insert[nbExpr, Visible->False, 2]],
            FrontEndExecute@
              FrontEndToken[
                nbObj,
                "Save",
                {f, "Package"}
                ],
            NotebookClose[nbObj]
            ],
        _,
          nbExpr = ideNotebookExpr[nb];
          Quiet@Internal`WithLocalSettings[
            nbObj = CreateDocument[Insert[nbExpr, Visible->False, 2]],
            FrontEndExecute@
              FrontEndToken[
                nbObj,
                "Save",
                {f, "Text"}
                ],
            NotebookClose[nbObj]
            ]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*fileViewer*)



fileViewer[
  root_, 
  smap_:<|
    "Directory"->{FontFamily->"Helvetica", FontColor->Hue[.666, .5, .5]}, 
    "File"->{FontFamily->"Helvetica"}
    |>,
  refreshHandle:Verbatim[Dynamic][_]:Dynamic[None]
  ]:=
  DynamicModule[
    {
      state = <||>,
      styles = If[!AssociationQ@smap, <|"Directory"->{}, "File"->smap|>, smap],
      fileViewerCell
      },
    If[!KeyExistsQ[styles, "Directory"],
      styles["Directory"]={}
      ];
    If[!KeyExistsQ[styles, "File"],
      styles["File"]={}
      ];
    Replace[refreshHandle,
      Verbatim[Dynamic][refresh_]:>
        Dynamic[
          refresh;
          fileViewerCell[Dynamic[state], root, styles],
          TrackedSymbols:>{refresh}
          ]
      ],
    Initialization:>{
        fileViewerCell[s:Verbatim[Dynamic][state_], dir_, styl_]:=
          OpenerView[
            {
              Replace[
                styl["Directory"],
                {
                  f_Function:>f[dir],
                  e_:>Style[FileNameTake[dir], e]
                  }
                ],
              If[DirectoryQ[#], 
                fileViewerCell[s, #, styl],
                Replace[
                  styl["File"],
                  {
                    f_Function:>f[#],
                    e_:>Style[FileNameTake[#], e]
                    }
                  ]
                ]&/@FileNames["*", dir]//Column//Dynamic
              },
            Dynamic[
              Lookup[state, dir, False],
              (state[dir]=#)&
              ]
            ]
        }
    ]


(* ::Subsubsection::Closed:: *)
(*getFileViewerCell*)



getFileViewerCell[nb_]:=
  Cell[
    BoxData@ToBoxes@
      Pane[
        fileViewer[
          ideProjectDir[nb],
          <|
            "Directory"->{FontFamily->"Helvetica", FontColor->Hue[.666, .5, .5]}, 
            "File"->(
                EventHandler[
                  Style[FileNameTake[#], FontFamily->"Helvetica"], 
                  {"MouseClicked":>If[CurrentValue["MouseClickCount"]==2, IDEOpen[nb, #]]}
                  ]&
                )
            |>
          ],
        {
          200, 
          FEPrivate`Part[
            FrontEnd`AbsoluteCurrentValue[nb, WindowSize],
            2
            ]-115
          },
        Alignment->{Left, Top},
        Scrollbars->{False, Automatic},
        AppearanceElements->None
        ],
    "FileBrowserCell",
    Background->GrayLevel[.98],
    CellFrame->{{0, 1}, {0, 0}},
    CellMargins->{{0, 0}, {0, -2}},
    System`CellFrameStyle->GrayLevel[.8]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookToggleFileBrowser*)



Quiet[

ideNotebookToggleFileBrowser[nb_]:=
  If[!ideViewerToggled[nb],
    ideSetNbData[nb, "FileViewerVisible", True];
    ideSetNbData[
      nb,
      "FileViewerCell",
      FEAttachCell[
        nb, 
        getFileViewerCell[nb],
        Automatic,
        {Left, Top},
        {Left, Top},
        {"EvaluatorQuit"}
        ]
      ],
    NotebookDelete@ideNbData[nb, "FileViewerCell"];
    ideSetNbData[nb, "FileViewerVisible", False]
    ],
    
General::shdw
]


(* ::Subsubsection::Closed:: *)
(*ideNotebookLoadPluginsMenu*)



ideNotebookLoadPluginsMenu[]:=
  ActionMenu["Coming Soon!", {}]


(* ::Subsection:: *)
(*Tabbing*)



(* ::Subsubsection::Closed:: *)
(*createDynamicTabRow*)



createDynamicTabRow[]:=
  With[
    {
      tns=
        Quiet@Block[
          {CurrentValue=cv}, 
          ideTabNames[FrontEnd`EvaluationNotebook[]]
          ]
      },
    Dynamic[
      Pane[Row@Map[createTabObject, tns], {Automatic, 35}, Alignment->Bottom]
      ]/.cv->CurrentValue
    ]


(* ::Subsubsection::Closed:: *)
(*ideSetTab*)



ideSetTab[nb_, tabName_]:=
  ideSetNbData[nb, "ActiveTab", tabName]


(* ::Subsubsection::Closed:: *)
(*createTabObject*)



createTabObject[tabName_String]:=
  Panel[
    Row@{
        Spacer[15],
        MouseAppearance[
          EventHandler[tabName, 
            "MouseClicked":>
              ideNotebookSwitchTab[EvaluationNotebook[], tabName]],
          "LinkHand"
          ],
        Spacer[3],
        Button["", 
         ideNotebookCloseTab[EvaluationNotebook[], tabName], 
          Appearance->
            {
              "Default"->None,
              "Hover"->
                FrontEnd`FileName[{"Typeset", "Message"}, "close.png"],
              "Pressed"->
                FrontEnd`FileName[{"Typeset", "Message"}, "close-hover.png"]
              },
          ImageSize->{12, 12}
          ]
        },
    ImageSize->{Automatic, 35},
    Appearance->
      {
        "Default"->With[
          {
            c=
              Block[
                {CurrentValue=FrontEnd`CurrentValue}, 
                ideNbData[FrontEnd`EvaluationNotebook[], "ActiveTab"]
                ]
            },
          FEPrivate`If[FEPrivate`SameQ[c, tabName], 
            FrontEnd`FileName[{"EasyIDE"}, "Tab.9.png"], 
            FrontEnd`FileName[{"EasyIDE"}, "TabBackground.9.png"]
            ]
          ]
        },
    BoxID->tabName<>"-tab"
    ]


(* ::Subsubsection::Closed:: *)
(*tabObjectPattern*)



tabObjectPattern[tabName_]:=
  Panel[___, BoxID->tabName, ___]


(* ::Subsubsection::Closed:: *)
(*insertTab*)



insertTab[dockedCell_, tabName_]:=
  dockedCell/.
    TemplateBox[tabs_, k:"TabbingRow", r___]:>
      TemplateBox[
        Append[tabs, ToBoxes[createTabObject[tabName]]],
        k,
        r
        ]


(* ::Subsubsection::Closed:: *)
(*deleteTab*)



deleteTab[dockedCell_, tabName_]:=
  DeleteCases[dockedCell, tabObjectPattern[tabName], Infinity]


(* ::Subsubsection::Closed:: *)
(*ideNotebookCreateTab*)



ideNotebookCreateTab[nb_NotebookObject, tabName_String, tabData_]:=
  ideSetNbData[nb, {"Tabs", tabName}, tabData];


(* ::Subsubsection::Closed:: *)
(*ideNotebookSwitchTab*)



ideNotebookSwitchTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      file,
      active = ideActiveTab[nb]
      },
    If[active =!= tabName,
      If[saveCurrent, ideNotebookSave[nb]];
      file = ideNbData[nb, {"Tabs", tabName, "File"}];
      ideNotebookPutFile[nb, file];
      ideSetTab[nb, tabName];
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ideNotebookCloseTab*)



ideNotebookCloseTab[nb_NotebookObject, tabName_String, saveCurrent:True|False:True]:=
  Module[
    {
      active = ideActiveTab[nb],
      tabs = ideNbData[nb, "Tabs"]
      },
    If[MemberQ[Keys@tabs, tabName],
      pauseDo[
        nb,
        tabs = DeleteCases[tabs, tabName->_];
        If[tabName == active,
          If[Length@tabs > 0,
            ideNotebookSwitchTab[nb, Keys[tabs][[1]]],
            If[saveCurrent, ideNotebookSave[nb]];
            ideNotebookPut[nb, Notebook[{}]]
            ]
          ];
        ideSetNbData[nb, "Tabs", tabs]
        ]
      ]
    ]


(* ::Subsection:: *)
(*File Operations*)



(* ::Subsubsection::Closed:: *)
(*getFileTabName*)



getFileTabName[nb_, f_]:=
  FileBaseName[f]


(* ::Subsubsection::Closed:: *)
(*IDEOpen*)



IDEOpen[nb_NotebookObject, f_String?FileExistsQ]:=
  Module[
    {
      nbObj,
      nbExpr,
      tabName
      },
    tabName = getFileTabName[nb, f];
    If[!TrueQ@ideTabExists[nb, tabName],
      ideNotebookCreateTab[nb, tabName, 
        {
          "File"->f  
          }
        ]
      ];
    ideNotebookSwitchTab[nb, tabName]
    ];
IDEOpen[nb_IDENotebookObject, f_String?FileExistsQ]:=
  IDEOpen[nb["Notebook"], f];


(* ::Subsubsection::Closed:: *)
(*IDESave*)



IDESave[nb_NotebookObject]:=
  ideNotebookSave[nb];
IDESave[nb_IDENotebookObject]:=
  IDESave[nb["Notebook"]]


(* ::Subsubsection::Closed:: *)
(*IDEClose*)



IDEClose[nb_NotebookObject, tabName_]:=
  If[ideTabExists[tabName],
    ideNotebookCloseTab[nb, tabName]
    ];
IDEClose[nb_IDENotebookObject, tabName_]:=
  IDEClose[nb["Notebook"], tabName]


(* ::Subsection:: *)
(*CreateIDENotebook*)



(* ::Subsubsection::Closed:: *)
(*createIDENotebookBar*)



createIDENotebookBar[]:=
    GridBox[{{
      GridBox[{{
        ToBoxes@Button["",
          ideNotebookToggleFileBrowser[EvaluationNotebook[]],
          Appearance->
            {
              "Default"->
                With[{p={$PackageName}},
                  FrontEnd`FileName[
                    p,
                    "FileViewerDown.png"
                    ]
                  ],
              "Pressed"->
                With[{p={$PackageName}},
                  FrontEnd`FileName[
                    p,
                    "FileViewerUp.png"
                    ]
                  ],
              With[
                {
                  c=
                    Block[
                      {CurrentValue=FrontEnd`CurrentValue}, 
                      ideViewerToggled[FrontEnd`EvaluationNotebook[]]
                      ]
                  },
                FEPrivate`If[FEPrivate`SameQ[c, True], "Pressed", Automatic]
                ]
              },
          ImageSize->{30, 30}
          ],
        ""
        }},
        GridBoxAlignment->{"Rows" -> {{Center}}},
        GridBoxItemSize->
          {
            "Columns" -> 
              {Full, Scaled[0.02]},
            "Rows" -> {{2.5}}
            }
        ],
      Cell[
        BoxData@
          ToBoxes@ideNotebookLoadPluginsMenu[],
        "IDENotebookMenu"
        ]
      }}
    ];


(* ::Subsubsection::Closed:: *)
(*createIDENotebookTabs*)



createIDENotebookTabs[]:=
  RowBox@{
    ToBoxes@Spacer[{25, 35}],
    ToBoxes@createDynamicTabRow[]
    }


createIDENotebookDockedCell[]:=
  Cell[
    BoxData@
      GridBox[
        {
          {
          DynamicBox@
            Get@
              PackageFilePath["FrontEnd", 
                "TextResources", "IDENotebookMainMenu.tr"]
            }, 
          {
          AdjustmentBox[
            DynamicBox@
              Get@
                PackageFilePath["FrontEnd", 
                  "TextResources", "IDENotebookTabs.tr"],
            BoxMargins->{{0, 0}, {-1, 0}}
            ]
            }
          },
        GridBoxItemSize->
          {
            "Columns" -> {Scaled[1]}
            },
        GridBoxAlignment->{"Columns"->{"Left"}},
        GridBoxDividers->{"Columns" -> {}, "Rows" -> {None, GrayLevel[0.8]}}
        ],
    "IDENotebookDockedCell"
    ]


(* ::Subsubsection::Closed:: *)
(*validateVomit*)



validateVomit[a_]:=
  (
    If[Quiet@NotebookInformation[a["Notebook"]]===$Failed, 
      PackageRaiseException[Automatic,
        "Notebook `` is invalid",
        a["Notebook"]
        ]
      ];
    If[Quiet[!TrueQ@DirectoryQ@a["Project"]],
      PackageRaiseException[Automatic,
        "Project directory `` is invalid",
        a["Project"]
        ]
      ];
    a
    )


(* ::Subsubsection::Closed:: *)
(*createIDENotebook*)



createIDENotebook[dir_String]:=
  CreateDocument@
    Notebook[
      {
        
        },
      DockedCells->
        createIDENotebookDockedCell[],
      TaggingRules->{$PackageName->{"Project"->{"Directory"->dir}}},
      StyleDefinitions->
        FrontEnd`FileName[{"EasyIDE"}, "EasyIDE.nb"],
      WindowTitle->"EasyIDE: ``"~TemplateApply~FileBaseName[dir]
      ]


(* ::Subsubsection::Closed:: *)
(*CreateIDENotebook*)



CreateIDENotebook[a_Association]:=
  validateVomit@a
CreateIDENotebook[nb_NotebookObject, dir_String]:=
  CreateIDENotebook@<|
    "Notebook"->nb,
    "Project"->dir
    |>;
CreateIDENotebook[dir_String]:=
  CreateIDENotebook[
    createIDENotebook[dir],
    dir
    ]


End[];



